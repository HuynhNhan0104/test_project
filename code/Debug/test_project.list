
test_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e00  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08002f0c  08002f0c  00012f0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f34  08002f34  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08002f34  08002f34  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f34  08002f34  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f34  08002f34  00012f34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f38  08002f38  00012f38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08002f3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  20000074  08002fb0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c0  08002fb0  000201c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b69e  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e81  00000000  00000000  0002b73b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cd8  00000000  00000000  0002d5c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000be8  00000000  00000000  0002e298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016f0a  00000000  00000000  0002ee80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d6d9  00000000  00000000  00045d8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084691  00000000  00000000  00053463  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d7af4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003428  00000000  00000000  000d7b48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	08002ef4 	.word	0x08002ef4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	08002ef4 	.word	0x08002ef4

0800014c <is_pressed>:

int flag_for_pressed[NUMBER_OF_BUTTON] = {0};
int flag_for_pressed_3s[NUMBER_OF_BUTTON] = {0};


int is_pressed(int index){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if(index > NUMBER_OF_BUTTON) return 0;
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b04      	cmp	r3, #4
 8000158:	dd01      	ble.n	800015e <is_pressed+0x12>
 800015a:	2300      	movs	r3, #0
 800015c:	e00d      	b.n	800017a <is_pressed+0x2e>
	if(flag_for_pressed[index]){
 800015e:	4a09      	ldr	r2, [pc, #36]	; (8000184 <is_pressed+0x38>)
 8000160:	687b      	ldr	r3, [r7, #4]
 8000162:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000166:	2b00      	cmp	r3, #0
 8000168:	d006      	beq.n	8000178 <is_pressed+0x2c>
		flag_for_pressed[index] = 0;
 800016a:	4a06      	ldr	r2, [pc, #24]	; (8000184 <is_pressed+0x38>)
 800016c:	687b      	ldr	r3, [r7, #4]
 800016e:	2100      	movs	r1, #0
 8000170:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 8000174:	2301      	movs	r3, #1
 8000176:	e000      	b.n	800017a <is_pressed+0x2e>
	}
	return 0;
 8000178:	2300      	movs	r3, #0
}
 800017a:	4618      	mov	r0, r3
 800017c:	370c      	adds	r7, #12
 800017e:	46bd      	mov	sp, r7
 8000180:	bc80      	pop	{r7}
 8000182:	4770      	bx	lr
 8000184:	20000090 	.word	0x20000090

08000188 <read_input>:

int register0_key[NUMBER_OF_BUTTON] = {[0 ... NUMBER_OF_BUTTON-1] = BUTTON_IS_RELEASED};
int register1_key[NUMBER_OF_BUTTON] = {[0 ... NUMBER_OF_BUTTON-1] = BUTTON_IS_RELEASED};
int register2_key[NUMBER_OF_BUTTON] = {[0 ... NUMBER_OF_BUTTON-1] = BUTTON_IS_RELEASED};
int button_buffer[NUMBER_OF_BUTTON] = {[0 ... NUMBER_OF_BUTTON-1] = BUTTON_IS_RELEASED};
void read_input(){
 8000188:	b580      	push	{r7, lr}
 800018a:	b082      	sub	sp, #8
 800018c:	af00      	add	r7, sp, #0
	for(int i = 0 ; i < NUMBER_OF_BUTTON; ++i){
 800018e:	2300      	movs	r3, #0
 8000190:	607b      	str	r3, [r7, #4]
 8000192:	e069      	b.n	8000268 <read_input+0xe0>
		register0_key[i] = register1_key[i];
 8000194:	4a38      	ldr	r2, [pc, #224]	; (8000278 <read_input+0xf0>)
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800019c:	4937      	ldr	r1, [pc, #220]	; (800027c <read_input+0xf4>)
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		register1_key[i] = register2_key[i];
 80001a4:	4a36      	ldr	r2, [pc, #216]	; (8000280 <read_input+0xf8>)
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001ac:	4932      	ldr	r1, [pc, #200]	; (8000278 <read_input+0xf0>)
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80001b4:	687b      	ldr	r3, [r7, #4]
 80001b6:	2b03      	cmp	r3, #3
 80001b8:	d836      	bhi.n	8000228 <read_input+0xa0>
 80001ba:	a201      	add	r2, pc, #4	; (adr r2, 80001c0 <read_input+0x38>)
 80001bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001c0:	080001d1 	.word	0x080001d1
 80001c4:	080001e7 	.word	0x080001e7
 80001c8:	080001fd 	.word	0x080001fd
 80001cc:	08000213 	.word	0x08000213
		switch(i){
		case 0 :
			 register2_key[i] = HAL_GPIO_ReadPin(A0_GPIO_Port, A0_Pin);
 80001d0:	2101      	movs	r1, #1
 80001d2:	482c      	ldr	r0, [pc, #176]	; (8000284 <read_input+0xfc>)
 80001d4:	f001 fa38 	bl	8001648 <HAL_GPIO_ReadPin>
 80001d8:	4603      	mov	r3, r0
 80001da:	4619      	mov	r1, r3
 80001dc:	4a28      	ldr	r2, [pc, #160]	; (8000280 <read_input+0xf8>)
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 80001e4:	e021      	b.n	800022a <read_input+0xa2>
		case 1:
			register2_key[i] = HAL_GPIO_ReadPin(A1_GPIO_Port, A1_Pin);
 80001e6:	2102      	movs	r1, #2
 80001e8:	4826      	ldr	r0, [pc, #152]	; (8000284 <read_input+0xfc>)
 80001ea:	f001 fa2d 	bl	8001648 <HAL_GPIO_ReadPin>
 80001ee:	4603      	mov	r3, r0
 80001f0:	4619      	mov	r1, r3
 80001f2:	4a23      	ldr	r2, [pc, #140]	; (8000280 <read_input+0xf8>)
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 80001fa:	e016      	b.n	800022a <read_input+0xa2>
		case 2:
			register2_key[i] = HAL_GPIO_ReadPin(A2_GPIO_Port, A2_Pin);
 80001fc:	2110      	movs	r1, #16
 80001fe:	4821      	ldr	r0, [pc, #132]	; (8000284 <read_input+0xfc>)
 8000200:	f001 fa22 	bl	8001648 <HAL_GPIO_ReadPin>
 8000204:	4603      	mov	r3, r0
 8000206:	4619      	mov	r1, r3
 8000208:	4a1d      	ldr	r2, [pc, #116]	; (8000280 <read_input+0xf8>)
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 8000210:	e00b      	b.n	800022a <read_input+0xa2>
		case 3:
			register2_key[i] = HAL_GPIO_ReadPin(A3_GPIO_Port, A3_Pin);
 8000212:	2101      	movs	r1, #1
 8000214:	481c      	ldr	r0, [pc, #112]	; (8000288 <read_input+0x100>)
 8000216:	f001 fa17 	bl	8001648 <HAL_GPIO_ReadPin>
 800021a:	4603      	mov	r3, r0
 800021c:	4619      	mov	r1, r3
 800021e:	4a18      	ldr	r2, [pc, #96]	; (8000280 <read_input+0xf8>)
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 8000226:	e000      	b.n	800022a <read_input+0xa2>
		default:
			break;
 8000228:	bf00      	nop
		}

		if(register0_key[i] == register1_key[i] && register1_key[i] == register2_key[i]){
 800022a:	4a14      	ldr	r2, [pc, #80]	; (800027c <read_input+0xf4>)
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000232:	4911      	ldr	r1, [pc, #68]	; (8000278 <read_input+0xf0>)
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800023a:	429a      	cmp	r2, r3
 800023c:	d111      	bne.n	8000262 <read_input+0xda>
 800023e:	4a0e      	ldr	r2, [pc, #56]	; (8000278 <read_input+0xf0>)
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000246:	490e      	ldr	r1, [pc, #56]	; (8000280 <read_input+0xf8>)
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800024e:	429a      	cmp	r2, r3
 8000250:	d107      	bne.n	8000262 <read_input+0xda>
			button_buffer[i] = register2_key[i];
 8000252:	4a0b      	ldr	r2, [pc, #44]	; (8000280 <read_input+0xf8>)
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800025a:	490c      	ldr	r1, [pc, #48]	; (800028c <read_input+0x104>)
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0 ; i < NUMBER_OF_BUTTON; ++i){
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	3301      	adds	r3, #1
 8000266:	607b      	str	r3, [r7, #4]
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	2b03      	cmp	r3, #3
 800026c:	dd92      	ble.n	8000194 <read_input+0xc>
		}
	}
}
 800026e:	bf00      	nop
 8000270:	bf00      	nop
 8000272:	3708      	adds	r7, #8
 8000274:	46bd      	mov	sp, r7
 8000276:	bd80      	pop	{r7, pc}
 8000278:	20000020 	.word	0x20000020
 800027c:	20000010 	.word	0x20000010
 8000280:	20000030 	.word	0x20000030
 8000284:	40010800 	.word	0x40010800
 8000288:	40010c00 	.word	0x40010c00
 800028c:	20000040 	.word	0x20000040

08000290 <fsm_for_button>:

void fsm_for_button(){
 8000290:	b580      	push	{r7, lr}
 8000292:	b082      	sub	sp, #8
 8000294:	af00      	add	r7, sp, #0
	for(int i = 0; i < NUMBER_OF_BUTTON; ++i){
 8000296:	2300      	movs	r3, #0
 8000298:	607b      	str	r3, [r7, #4]
 800029a:	e057      	b.n	800034c <fsm_for_button+0xbc>
		switch(state_of_button[i]){
 800029c:	4a2f      	ldr	r2, [pc, #188]	; (800035c <fsm_for_button+0xcc>)
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002a4:	2b16      	cmp	r3, #22
 80002a6:	d03b      	beq.n	8000320 <fsm_for_button+0x90>
 80002a8:	2b16      	cmp	r3, #22
 80002aa:	dc45      	bgt.n	8000338 <fsm_for_button+0xa8>
 80002ac:	2b14      	cmp	r3, #20
 80002ae:	d002      	beq.n	80002b6 <fsm_for_button+0x26>
 80002b0:	2b15      	cmp	r3, #21
 80002b2:	d016      	beq.n	80002e2 <fsm_for_button+0x52>
				state_of_button[i] = BUTTON_RELEASED;
			}

			break;
		default:
			break;
 80002b4:	e040      	b.n	8000338 <fsm_for_button+0xa8>
			if(button_buffer[i] == BUTTON_IS_PRESSED){
 80002b6:	4a2a      	ldr	r2, [pc, #168]	; (8000360 <fsm_for_button+0xd0>)
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d13c      	bne.n	800033c <fsm_for_button+0xac>
				flag_for_pressed[i] = 1;
 80002c2:	4a28      	ldr	r2, [pc, #160]	; (8000364 <fsm_for_button+0xd4>)
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	2101      	movs	r1, #1
 80002c8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				set_timer(i, 3000);
 80002cc:	f640 31b8 	movw	r1, #3000	; 0xbb8
 80002d0:	6878      	ldr	r0, [r7, #4]
 80002d2:	f000 fca7 	bl	8000c24 <set_timer>
				state_of_button[i] = BUTTON_PRESSED;
 80002d6:	4a21      	ldr	r2, [pc, #132]	; (800035c <fsm_for_button+0xcc>)
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	2115      	movs	r1, #21
 80002dc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 80002e0:	e02c      	b.n	800033c <fsm_for_button+0xac>
			if(is_timer_timeout(i)){
 80002e2:	6878      	ldr	r0, [r7, #4]
 80002e4:	f000 fcd0 	bl	8000c88 <is_timer_timeout>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d009      	beq.n	8000302 <fsm_for_button+0x72>
				flag_for_pressed_3s[i] = 1;
 80002ee:	4a1e      	ldr	r2, [pc, #120]	; (8000368 <fsm_for_button+0xd8>)
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	2101      	movs	r1, #1
 80002f4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				state_of_button[i] = BUTTON_PRESSED_3S;
 80002f8:	4a18      	ldr	r2, [pc, #96]	; (800035c <fsm_for_button+0xcc>)
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	2116      	movs	r1, #22
 80002fe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			if(button_buffer[i] == BUTTON_IS_RELEASED){
 8000302:	4a17      	ldr	r2, [pc, #92]	; (8000360 <fsm_for_button+0xd0>)
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800030a:	2b01      	cmp	r3, #1
 800030c:	d118      	bne.n	8000340 <fsm_for_button+0xb0>
				clear_timer(i);
 800030e:	6878      	ldr	r0, [r7, #4]
 8000310:	f000 fca2 	bl	8000c58 <clear_timer>
				state_of_button[i] = BUTTON_RELEASED;
 8000314:	4a11      	ldr	r2, [pc, #68]	; (800035c <fsm_for_button+0xcc>)
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	2114      	movs	r1, #20
 800031a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 800031e:	e00f      	b.n	8000340 <fsm_for_button+0xb0>
			if(button_buffer[i] == BUTTON_IS_RELEASED){
 8000320:	4a0f      	ldr	r2, [pc, #60]	; (8000360 <fsm_for_button+0xd0>)
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000328:	2b01      	cmp	r3, #1
 800032a:	d10b      	bne.n	8000344 <fsm_for_button+0xb4>
				state_of_button[i] = BUTTON_RELEASED;
 800032c:	4a0b      	ldr	r2, [pc, #44]	; (800035c <fsm_for_button+0xcc>)
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	2114      	movs	r1, #20
 8000332:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 8000336:	e005      	b.n	8000344 <fsm_for_button+0xb4>
			break;
 8000338:	bf00      	nop
 800033a:	e004      	b.n	8000346 <fsm_for_button+0xb6>
			break;
 800033c:	bf00      	nop
 800033e:	e002      	b.n	8000346 <fsm_for_button+0xb6>
			break;
 8000340:	bf00      	nop
 8000342:	e000      	b.n	8000346 <fsm_for_button+0xb6>
			break;
 8000344:	bf00      	nop
	for(int i = 0; i < NUMBER_OF_BUTTON; ++i){
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	3301      	adds	r3, #1
 800034a:	607b      	str	r3, [r7, #4]
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	2b03      	cmp	r3, #3
 8000350:	dda4      	ble.n	800029c <fsm_for_button+0xc>



		}
	}
}
 8000352:	bf00      	nop
 8000354:	bf00      	nop
 8000356:	3708      	adds	r7, #8
 8000358:	46bd      	mov	sp, r7
 800035a:	bd80      	pop	{r7, pc}
 800035c:	20000000 	.word	0x20000000
 8000360:	20000040 	.word	0x20000040
 8000364:	20000090 	.word	0x20000090
 8000368:	200000a0 	.word	0x200000a0

0800036c <fsm_traffic_1_run>:

#include "fsm_traffic.h"



void fsm_traffic_1_run(){
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0
	switch(state_led_traffic_1){
 8000370:	4b29      	ldr	r3, [pc, #164]	; (8000418 <fsm_traffic_1_run+0xac>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	2b0c      	cmp	r3, #12
 8000376:	d030      	beq.n	80003da <fsm_traffic_1_run+0x6e>
 8000378:	2b0c      	cmp	r3, #12
 800037a:	dc43      	bgt.n	8000404 <fsm_traffic_1_run+0x98>
 800037c:	2b0a      	cmp	r3, #10
 800037e:	d002      	beq.n	8000386 <fsm_traffic_1_run+0x1a>
 8000380:	2b0b      	cmp	r3, #11
 8000382:	d015      	beq.n	80003b0 <fsm_traffic_1_run+0x44>
				state_led_traffic_1 = YELLOW;
				set_timer(4,duration_time_of_YELLOW);
			}
		break;
		default:
		break;
 8000384:	e03e      	b.n	8000404 <fsm_traffic_1_run+0x98>
			turn_on_traffic_led_1(state_led_traffic_1);
 8000386:	4b24      	ldr	r3, [pc, #144]	; (8000418 <fsm_traffic_1_run+0xac>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	4618      	mov	r0, r3
 800038c:	f000 fcc6 	bl	8000d1c <turn_on_traffic_led_1>
			if(is_timer_timeout(4)){
 8000390:	2004      	movs	r0, #4
 8000392:	f000 fc79 	bl	8000c88 <is_timer_timeout>
 8000396:	4603      	mov	r3, r0
 8000398:	2b00      	cmp	r3, #0
 800039a:	d035      	beq.n	8000408 <fsm_traffic_1_run+0x9c>
				state_led_traffic_1 =GREEN;
 800039c:	4b1e      	ldr	r3, [pc, #120]	; (8000418 <fsm_traffic_1_run+0xac>)
 800039e:	220c      	movs	r2, #12
 80003a0:	601a      	str	r2, [r3, #0]
				set_timer(4,duration_time_of_GREEN);
 80003a2:	4b1e      	ldr	r3, [pc, #120]	; (800041c <fsm_traffic_1_run+0xb0>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	4619      	mov	r1, r3
 80003a8:	2004      	movs	r0, #4
 80003aa:	f000 fc3b 	bl	8000c24 <set_timer>
		break;
 80003ae:	e02b      	b.n	8000408 <fsm_traffic_1_run+0x9c>
			turn_on_traffic_led_1(state_led_traffic_1);
 80003b0:	4b19      	ldr	r3, [pc, #100]	; (8000418 <fsm_traffic_1_run+0xac>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	4618      	mov	r0, r3
 80003b6:	f000 fcb1 	bl	8000d1c <turn_on_traffic_led_1>
			if(is_timer_timeout(4)){
 80003ba:	2004      	movs	r0, #4
 80003bc:	f000 fc64 	bl	8000c88 <is_timer_timeout>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d022      	beq.n	800040c <fsm_traffic_1_run+0xa0>
				state_led_traffic_1 = RED;
 80003c6:	4b14      	ldr	r3, [pc, #80]	; (8000418 <fsm_traffic_1_run+0xac>)
 80003c8:	220a      	movs	r2, #10
 80003ca:	601a      	str	r2, [r3, #0]
				set_timer(4,duration_time_of_RED);
 80003cc:	4b14      	ldr	r3, [pc, #80]	; (8000420 <fsm_traffic_1_run+0xb4>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	4619      	mov	r1, r3
 80003d2:	2004      	movs	r0, #4
 80003d4:	f000 fc26 	bl	8000c24 <set_timer>
		break;
 80003d8:	e018      	b.n	800040c <fsm_traffic_1_run+0xa0>
			turn_on_traffic_led_1(state_led_traffic_1);
 80003da:	4b0f      	ldr	r3, [pc, #60]	; (8000418 <fsm_traffic_1_run+0xac>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	4618      	mov	r0, r3
 80003e0:	f000 fc9c 	bl	8000d1c <turn_on_traffic_led_1>
			if(is_timer_timeout(4)){
 80003e4:	2004      	movs	r0, #4
 80003e6:	f000 fc4f 	bl	8000c88 <is_timer_timeout>
 80003ea:	4603      	mov	r3, r0
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d00f      	beq.n	8000410 <fsm_traffic_1_run+0xa4>
				state_led_traffic_1 = YELLOW;
 80003f0:	4b09      	ldr	r3, [pc, #36]	; (8000418 <fsm_traffic_1_run+0xac>)
 80003f2:	220b      	movs	r2, #11
 80003f4:	601a      	str	r2, [r3, #0]
				set_timer(4,duration_time_of_YELLOW);
 80003f6:	4b0b      	ldr	r3, [pc, #44]	; (8000424 <fsm_traffic_1_run+0xb8>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	4619      	mov	r1, r3
 80003fc:	2004      	movs	r0, #4
 80003fe:	f000 fc11 	bl	8000c24 <set_timer>
		break;
 8000402:	e005      	b.n	8000410 <fsm_traffic_1_run+0xa4>
		break;
 8000404:	bf00      	nop
 8000406:	e004      	b.n	8000412 <fsm_traffic_1_run+0xa6>
		break;
 8000408:	bf00      	nop
 800040a:	e002      	b.n	8000412 <fsm_traffic_1_run+0xa6>
		break;
 800040c:	bf00      	nop
 800040e:	e000      	b.n	8000412 <fsm_traffic_1_run+0xa6>
		break;
 8000410:	bf00      	nop
	}
}
 8000412:	bf00      	nop
 8000414:	bd80      	pop	{r7, pc}
 8000416:	bf00      	nop
 8000418:	20000050 	.word	0x20000050
 800041c:	20000060 	.word	0x20000060
 8000420:	20000058 	.word	0x20000058
 8000424:	2000005c 	.word	0x2000005c

08000428 <fsm_traffic_2_run>:


void fsm_traffic_2_run(){
 8000428:	b580      	push	{r7, lr}
 800042a:	af00      	add	r7, sp, #0
	switch(state_led_traffic_2){
 800042c:	4b29      	ldr	r3, [pc, #164]	; (80004d4 <fsm_traffic_2_run+0xac>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	2b0c      	cmp	r3, #12
 8000432:	d030      	beq.n	8000496 <fsm_traffic_2_run+0x6e>
 8000434:	2b0c      	cmp	r3, #12
 8000436:	dc43      	bgt.n	80004c0 <fsm_traffic_2_run+0x98>
 8000438:	2b0a      	cmp	r3, #10
 800043a:	d002      	beq.n	8000442 <fsm_traffic_2_run+0x1a>
 800043c:	2b0b      	cmp	r3, #11
 800043e:	d015      	beq.n	800046c <fsm_traffic_2_run+0x44>
				state_led_traffic_2 = YELLOW;
				set_timer(5,duration_time_of_YELLOW);
			}
		break;
		default:
		break;
 8000440:	e03e      	b.n	80004c0 <fsm_traffic_2_run+0x98>
			turn_on_traffic_led_2(state_led_traffic_2);
 8000442:	4b24      	ldr	r3, [pc, #144]	; (80004d4 <fsm_traffic_2_run+0xac>)
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	4618      	mov	r0, r3
 8000448:	f000 fcba 	bl	8000dc0 <turn_on_traffic_led_2>
			if(is_timer_timeout(5)){
 800044c:	2005      	movs	r0, #5
 800044e:	f000 fc1b 	bl	8000c88 <is_timer_timeout>
 8000452:	4603      	mov	r3, r0
 8000454:	2b00      	cmp	r3, #0
 8000456:	d035      	beq.n	80004c4 <fsm_traffic_2_run+0x9c>
				state_led_traffic_2 = GREEN;
 8000458:	4b1e      	ldr	r3, [pc, #120]	; (80004d4 <fsm_traffic_2_run+0xac>)
 800045a:	220c      	movs	r2, #12
 800045c:	601a      	str	r2, [r3, #0]
				set_timer(5,duration_time_of_GREEN);
 800045e:	4b1e      	ldr	r3, [pc, #120]	; (80004d8 <fsm_traffic_2_run+0xb0>)
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	4619      	mov	r1, r3
 8000464:	2005      	movs	r0, #5
 8000466:	f000 fbdd 	bl	8000c24 <set_timer>
		break;
 800046a:	e02b      	b.n	80004c4 <fsm_traffic_2_run+0x9c>
			turn_on_traffic_led_2(state_led_traffic_2);
 800046c:	4b19      	ldr	r3, [pc, #100]	; (80004d4 <fsm_traffic_2_run+0xac>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	4618      	mov	r0, r3
 8000472:	f000 fca5 	bl	8000dc0 <turn_on_traffic_led_2>
			if(is_timer_timeout(5)){
 8000476:	2005      	movs	r0, #5
 8000478:	f000 fc06 	bl	8000c88 <is_timer_timeout>
 800047c:	4603      	mov	r3, r0
 800047e:	2b00      	cmp	r3, #0
 8000480:	d022      	beq.n	80004c8 <fsm_traffic_2_run+0xa0>
				state_led_traffic_2 = RED;
 8000482:	4b14      	ldr	r3, [pc, #80]	; (80004d4 <fsm_traffic_2_run+0xac>)
 8000484:	220a      	movs	r2, #10
 8000486:	601a      	str	r2, [r3, #0]
				set_timer(5,duration_time_of_RED);
 8000488:	4b14      	ldr	r3, [pc, #80]	; (80004dc <fsm_traffic_2_run+0xb4>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	4619      	mov	r1, r3
 800048e:	2005      	movs	r0, #5
 8000490:	f000 fbc8 	bl	8000c24 <set_timer>
		break;
 8000494:	e018      	b.n	80004c8 <fsm_traffic_2_run+0xa0>
			turn_on_traffic_led_2(state_led_traffic_2);
 8000496:	4b0f      	ldr	r3, [pc, #60]	; (80004d4 <fsm_traffic_2_run+0xac>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	4618      	mov	r0, r3
 800049c:	f000 fc90 	bl	8000dc0 <turn_on_traffic_led_2>
			if(is_timer_timeout(5)){
 80004a0:	2005      	movs	r0, #5
 80004a2:	f000 fbf1 	bl	8000c88 <is_timer_timeout>
 80004a6:	4603      	mov	r3, r0
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d00f      	beq.n	80004cc <fsm_traffic_2_run+0xa4>
				state_led_traffic_2 = YELLOW;
 80004ac:	4b09      	ldr	r3, [pc, #36]	; (80004d4 <fsm_traffic_2_run+0xac>)
 80004ae:	220b      	movs	r2, #11
 80004b0:	601a      	str	r2, [r3, #0]
				set_timer(5,duration_time_of_YELLOW);
 80004b2:	4b0b      	ldr	r3, [pc, #44]	; (80004e0 <fsm_traffic_2_run+0xb8>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	4619      	mov	r1, r3
 80004b8:	2005      	movs	r0, #5
 80004ba:	f000 fbb3 	bl	8000c24 <set_timer>
		break;
 80004be:	e005      	b.n	80004cc <fsm_traffic_2_run+0xa4>
		break;
 80004c0:	bf00      	nop
 80004c2:	e004      	b.n	80004ce <fsm_traffic_2_run+0xa6>
		break;
 80004c4:	bf00      	nop
 80004c6:	e002      	b.n	80004ce <fsm_traffic_2_run+0xa6>
		break;
 80004c8:	bf00      	nop
 80004ca:	e000      	b.n	80004ce <fsm_traffic_2_run+0xa6>
		break;
 80004cc:	bf00      	nop
	}
}
 80004ce:	bf00      	nop
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	bf00      	nop
 80004d4:	20000054 	.word	0x20000054
 80004d8:	20000060 	.word	0x20000060
 80004dc:	20000058 	.word	0x20000058
 80004e0:	2000005c 	.word	0x2000005c

080004e4 <fsm_system_run>:


void fsm_system_run(){
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
	switch(mode){
 80004e8:	4b9f      	ldr	r3, [pc, #636]	; (8000768 <fsm_system_run+0x284>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	2b04      	cmp	r3, #4
 80004ee:	f200 812f 	bhi.w	8000750 <fsm_system_run+0x26c>
 80004f2:	a201      	add	r2, pc, #4	; (adr r2, 80004f8 <fsm_system_run+0x14>)
 80004f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004f8:	0800050d 	.word	0x0800050d
 80004fc:	08000539 	.word	0x08000539
 8000500:	0800059b 	.word	0x0800059b
 8000504:	08000633 	.word	0x08000633
 8000508:	080006c9 	.word	0x080006c9
		case INIT_SYSTEM:
			//TODO
			state_led_traffic_1 = RED;
 800050c:	4b97      	ldr	r3, [pc, #604]	; (800076c <fsm_system_run+0x288>)
 800050e:	220a      	movs	r2, #10
 8000510:	601a      	str	r2, [r3, #0]
			state_led_traffic_2 = GREEN;
 8000512:	4b97      	ldr	r3, [pc, #604]	; (8000770 <fsm_system_run+0x28c>)
 8000514:	220c      	movs	r2, #12
 8000516:	601a      	str	r2, [r3, #0]
			set_timer(4, duration_time_of_RED);
 8000518:	4b96      	ldr	r3, [pc, #600]	; (8000774 <fsm_system_run+0x290>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4619      	mov	r1, r3
 800051e:	2004      	movs	r0, #4
 8000520:	f000 fb80 	bl	8000c24 <set_timer>
			set_timer(5, duration_time_of_GREEN);
 8000524:	4b94      	ldr	r3, [pc, #592]	; (8000778 <fsm_system_run+0x294>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4619      	mov	r1, r3
 800052a:	2005      	movs	r0, #5
 800052c:	f000 fb7a 	bl	8000c24 <set_timer>
			//STATE STRANSITION
			mode = NORMAL_MODE;
 8000530:	4b8d      	ldr	r3, [pc, #564]	; (8000768 <fsm_system_run+0x284>)
 8000532:	2201      	movs	r2, #1
 8000534:	601a      	str	r2, [r3, #0]
		break;
 8000536:	e114      	b.n	8000762 <fsm_system_run+0x27e>
		case NORMAL_MODE:
			//TODO
			fsm_traffic_1_run();
 8000538:	f7ff ff18 	bl	800036c <fsm_traffic_1_run>
			fsm_traffic_2_run();
 800053c:	f7ff ff74 	bl	8000428 <fsm_traffic_2_run>
			//STATE STRANSITION
			//button 0 is pressed,  NORMAl_MODE -> MODIFY_RED_MODE
			if(is_pressed(1)){
 8000540:	2001      	movs	r0, #1
 8000542:	f7ff fe03 	bl	800014c <is_pressed>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	f000 8103 	beq.w	8000754 <fsm_system_run+0x270>
				clear_timer(4);
 800054e:	2004      	movs	r0, #4
 8000550:	f000 fb82 	bl	8000c58 <clear_timer>
				clear_timer(5);
 8000554:	2005      	movs	r0, #5
 8000556:	f000 fb7f 	bl	8000c58 <clear_timer>
				state_led_traffic_1 = RED;
 800055a:	4b84      	ldr	r3, [pc, #528]	; (800076c <fsm_system_run+0x288>)
 800055c:	220a      	movs	r2, #10
 800055e:	601a      	str	r2, [r3, #0]
				state_led_traffic_2 = RED;
 8000560:	4b83      	ldr	r3, [pc, #524]	; (8000770 <fsm_system_run+0x28c>)
 8000562:	220a      	movs	r2, #10
 8000564:	601a      	str	r2, [r3, #0]
				set_timer(6, 500);
 8000566:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800056a:	2006      	movs	r0, #6
 800056c:	f000 fb5a 	bl	8000c24 <set_timer>
				turn_on_traffic_led_1(state_led_traffic_1);
 8000570:	4b7e      	ldr	r3, [pc, #504]	; (800076c <fsm_system_run+0x288>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4618      	mov	r0, r3
 8000576:	f000 fbd1 	bl	8000d1c <turn_on_traffic_led_1>
				turn_on_traffic_led_2(state_led_traffic_2);
 800057a:	4b7d      	ldr	r3, [pc, #500]	; (8000770 <fsm_system_run+0x28c>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	4618      	mov	r0, r3
 8000580:	f000 fc1e 	bl	8000dc0 <turn_on_traffic_led_2>
				is_on = 0;
 8000584:	4b7d      	ldr	r3, [pc, #500]	; (800077c <fsm_system_run+0x298>)
 8000586:	2200      	movs	r2, #0
 8000588:	601a      	str	r2, [r3, #0]
				buffer_duration_time = duration_time_of_RED;
 800058a:	4b7a      	ldr	r3, [pc, #488]	; (8000774 <fsm_system_run+0x290>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	4a7c      	ldr	r2, [pc, #496]	; (8000780 <fsm_system_run+0x29c>)
 8000590:	6013      	str	r3, [r2, #0]
				mode = MODIFY_RED_MODE;
 8000592:	4b75      	ldr	r3, [pc, #468]	; (8000768 <fsm_system_run+0x284>)
 8000594:	2202      	movs	r2, #2
 8000596:	601a      	str	r2, [r3, #0]
			}
		break;
 8000598:	e0dc      	b.n	8000754 <fsm_system_run+0x270>
		case MODIFY_RED_MODE:
			//todo

			blinking_led_traffic(state_led_traffic_1);
 800059a:	4b74      	ldr	r3, [pc, #464]	; (800076c <fsm_system_run+0x288>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	4618      	mov	r0, r3
 80005a0:	f000 fc68 	bl	8000e74 <blinking_led_traffic>

			//button 1 is pressed, buffer_duration_time increase 1, if buffer exceed 99, buffer = 0;
			if(is_pressed(2)){
 80005a4:	2002      	movs	r0, #2
 80005a6:	f7ff fdd1 	bl	800014c <is_pressed>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d00f      	beq.n	80005d0 <fsm_system_run+0xec>
				buffer_duration_time = (buffer_duration_time +1000)% (100*1000);
 80005b0:	4b73      	ldr	r3, [pc, #460]	; (8000780 <fsm_system_run+0x29c>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 80005b8:	4b72      	ldr	r3, [pc, #456]	; (8000784 <fsm_system_run+0x2a0>)
 80005ba:	fb83 1302 	smull	r1, r3, r3, r2
 80005be:	1359      	asrs	r1, r3, #13
 80005c0:	17d3      	asrs	r3, r2, #31
 80005c2:	1acb      	subs	r3, r1, r3
 80005c4:	4970      	ldr	r1, [pc, #448]	; (8000788 <fsm_system_run+0x2a4>)
 80005c6:	fb01 f303 	mul.w	r3, r1, r3
 80005ca:	1ad3      	subs	r3, r2, r3
 80005cc:	4a6c      	ldr	r2, [pc, #432]	; (8000780 <fsm_system_run+0x29c>)
 80005ce:	6013      	str	r3, [r2, #0]
			}
			//button 2 is pressed,  duration time of system = buffer_duration_time;
			if(is_pressed(3)){
 80005d0:	2003      	movs	r0, #3
 80005d2:	f7ff fdbb 	bl	800014c <is_pressed>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d003      	beq.n	80005e4 <fsm_system_run+0x100>
				duration_time_of_RED = buffer_duration_time;
 80005dc:	4b68      	ldr	r3, [pc, #416]	; (8000780 <fsm_system_run+0x29c>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a64      	ldr	r2, [pc, #400]	; (8000774 <fsm_system_run+0x290>)
 80005e2:	6013      	str	r3, [r2, #0]
			}
			//STATE STRANSITION
			//button 0 is pressed, MODIFY_RED_MODE -> MODIFY_YELLOW_MODE
			if(is_pressed(1)){
 80005e4:	2001      	movs	r0, #1
 80005e6:	f7ff fdb1 	bl	800014c <is_pressed>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	f000 80b3 	beq.w	8000758 <fsm_system_run+0x274>
				state_led_traffic_1 = YELLOW;
 80005f2:	4b5e      	ldr	r3, [pc, #376]	; (800076c <fsm_system_run+0x288>)
 80005f4:	220b      	movs	r2, #11
 80005f6:	601a      	str	r2, [r3, #0]
				state_led_traffic_2 = YELLOW;
 80005f8:	4b5d      	ldr	r3, [pc, #372]	; (8000770 <fsm_system_run+0x28c>)
 80005fa:	220b      	movs	r2, #11
 80005fc:	601a      	str	r2, [r3, #0]
				set_timer(6, 500);
 80005fe:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000602:	2006      	movs	r0, #6
 8000604:	f000 fb0e 	bl	8000c24 <set_timer>
				is_on = 0;
 8000608:	4b5c      	ldr	r3, [pc, #368]	; (800077c <fsm_system_run+0x298>)
 800060a:	2200      	movs	r2, #0
 800060c:	601a      	str	r2, [r3, #0]
				turn_on_traffic_led_1(state_led_traffic_1);
 800060e:	4b57      	ldr	r3, [pc, #348]	; (800076c <fsm_system_run+0x288>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	4618      	mov	r0, r3
 8000614:	f000 fb82 	bl	8000d1c <turn_on_traffic_led_1>
				turn_on_traffic_led_2(state_led_traffic_2);
 8000618:	4b55      	ldr	r3, [pc, #340]	; (8000770 <fsm_system_run+0x28c>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4618      	mov	r0, r3
 800061e:	f000 fbcf 	bl	8000dc0 <turn_on_traffic_led_2>
				buffer_duration_time = duration_time_of_YELLOW;
 8000622:	4b5a      	ldr	r3, [pc, #360]	; (800078c <fsm_system_run+0x2a8>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	4a56      	ldr	r2, [pc, #344]	; (8000780 <fsm_system_run+0x29c>)
 8000628:	6013      	str	r3, [r2, #0]
				mode = MODIFY_YELLOW_MODE;
 800062a:	4b4f      	ldr	r3, [pc, #316]	; (8000768 <fsm_system_run+0x284>)
 800062c:	2203      	movs	r2, #3
 800062e:	601a      	str	r2, [r3, #0]
			}
		break;
 8000630:	e092      	b.n	8000758 <fsm_system_run+0x274>
		case MODIFY_YELLOW_MODE:

			blinking_led_traffic(state_led_traffic_1);
 8000632:	4b4e      	ldr	r3, [pc, #312]	; (800076c <fsm_system_run+0x288>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	4618      	mov	r0, r3
 8000638:	f000 fc1c 	bl	8000e74 <blinking_led_traffic>

			//button 1 is pressed, buffer_duration_time increase 1, if buffer exceed 99, buffer = 0;
			if(is_pressed(2)){
 800063c:	2002      	movs	r0, #2
 800063e:	f7ff fd85 	bl	800014c <is_pressed>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d00f      	beq.n	8000668 <fsm_system_run+0x184>
				buffer_duration_time = (buffer_duration_time +1000)% (100*1000);
 8000648:	4b4d      	ldr	r3, [pc, #308]	; (8000780 <fsm_system_run+0x29c>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 8000650:	4b4c      	ldr	r3, [pc, #304]	; (8000784 <fsm_system_run+0x2a0>)
 8000652:	fb83 1302 	smull	r1, r3, r3, r2
 8000656:	1359      	asrs	r1, r3, #13
 8000658:	17d3      	asrs	r3, r2, #31
 800065a:	1acb      	subs	r3, r1, r3
 800065c:	494a      	ldr	r1, [pc, #296]	; (8000788 <fsm_system_run+0x2a4>)
 800065e:	fb01 f303 	mul.w	r3, r1, r3
 8000662:	1ad3      	subs	r3, r2, r3
 8000664:	4a46      	ldr	r2, [pc, #280]	; (8000780 <fsm_system_run+0x29c>)
 8000666:	6013      	str	r3, [r2, #0]
			}
			//button 2 is pressed,  duration time of system = buffer_duration_time;
			if(is_pressed(3)){
 8000668:	2003      	movs	r0, #3
 800066a:	f7ff fd6f 	bl	800014c <is_pressed>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d003      	beq.n	800067c <fsm_system_run+0x198>
				duration_time_of_YELLOW = buffer_duration_time;
 8000674:	4b42      	ldr	r3, [pc, #264]	; (8000780 <fsm_system_run+0x29c>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a44      	ldr	r2, [pc, #272]	; (800078c <fsm_system_run+0x2a8>)
 800067a:	6013      	str	r3, [r2, #0]
			}

			//STATE STRANSITION
			//button 0 is pressed,MODIFY_YELLOW_MODE  ->  MODIFY_GREEN_MODE
			if(is_pressed(1)){
 800067c:	2001      	movs	r0, #1
 800067e:	f7ff fd65 	bl	800014c <is_pressed>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d069      	beq.n	800075c <fsm_system_run+0x278>
				state_led_traffic_1 = GREEN;
 8000688:	4b38      	ldr	r3, [pc, #224]	; (800076c <fsm_system_run+0x288>)
 800068a:	220c      	movs	r2, #12
 800068c:	601a      	str	r2, [r3, #0]
				state_led_traffic_2 = GREEN;
 800068e:	4b38      	ldr	r3, [pc, #224]	; (8000770 <fsm_system_run+0x28c>)
 8000690:	220c      	movs	r2, #12
 8000692:	601a      	str	r2, [r3, #0]
				set_timer(6, 500);
 8000694:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000698:	2006      	movs	r0, #6
 800069a:	f000 fac3 	bl	8000c24 <set_timer>
				is_on = 0;
 800069e:	4b37      	ldr	r3, [pc, #220]	; (800077c <fsm_system_run+0x298>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
				turn_on_traffic_led_1(state_led_traffic_1);
 80006a4:	4b31      	ldr	r3, [pc, #196]	; (800076c <fsm_system_run+0x288>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4618      	mov	r0, r3
 80006aa:	f000 fb37 	bl	8000d1c <turn_on_traffic_led_1>
				turn_on_traffic_led_2(state_led_traffic_2);
 80006ae:	4b30      	ldr	r3, [pc, #192]	; (8000770 <fsm_system_run+0x28c>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	4618      	mov	r0, r3
 80006b4:	f000 fb84 	bl	8000dc0 <turn_on_traffic_led_2>
				buffer_duration_time = duration_time_of_GREEN;
 80006b8:	4b2f      	ldr	r3, [pc, #188]	; (8000778 <fsm_system_run+0x294>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a30      	ldr	r2, [pc, #192]	; (8000780 <fsm_system_run+0x29c>)
 80006be:	6013      	str	r3, [r2, #0]
				mode = MODIFY_GREEN_MODE;
 80006c0:	4b29      	ldr	r3, [pc, #164]	; (8000768 <fsm_system_run+0x284>)
 80006c2:	2204      	movs	r2, #4
 80006c4:	601a      	str	r2, [r3, #0]
			}
		break;
 80006c6:	e049      	b.n	800075c <fsm_system_run+0x278>
		case MODIFY_GREEN_MODE:
			blinking_led_traffic(state_led_traffic_1);
 80006c8:	4b28      	ldr	r3, [pc, #160]	; (800076c <fsm_system_run+0x288>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4618      	mov	r0, r3
 80006ce:	f000 fbd1 	bl	8000e74 <blinking_led_traffic>
			//button 1 is pressed, buffer_duration_time increase 1, if buffer exceed 99, buffer = 0;
			if(is_pressed(2)){
 80006d2:	2002      	movs	r0, #2
 80006d4:	f7ff fd3a 	bl	800014c <is_pressed>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d00f      	beq.n	80006fe <fsm_system_run+0x21a>
				buffer_duration_time = (buffer_duration_time +1000)% (100*1000);
 80006de:	4b28      	ldr	r3, [pc, #160]	; (8000780 <fsm_system_run+0x29c>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 80006e6:	4b27      	ldr	r3, [pc, #156]	; (8000784 <fsm_system_run+0x2a0>)
 80006e8:	fb83 1302 	smull	r1, r3, r3, r2
 80006ec:	1359      	asrs	r1, r3, #13
 80006ee:	17d3      	asrs	r3, r2, #31
 80006f0:	1acb      	subs	r3, r1, r3
 80006f2:	4925      	ldr	r1, [pc, #148]	; (8000788 <fsm_system_run+0x2a4>)
 80006f4:	fb01 f303 	mul.w	r3, r1, r3
 80006f8:	1ad3      	subs	r3, r2, r3
 80006fa:	4a21      	ldr	r2, [pc, #132]	; (8000780 <fsm_system_run+0x29c>)
 80006fc:	6013      	str	r3, [r2, #0]
			}
			//button 2 is pressed,  duration time of system = buffer_duration_time;
			if(is_pressed(3)){
 80006fe:	2003      	movs	r0, #3
 8000700:	f7ff fd24 	bl	800014c <is_pressed>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d003      	beq.n	8000712 <fsm_system_run+0x22e>
				duration_time_of_GREEN = buffer_duration_time;
 800070a:	4b1d      	ldr	r3, [pc, #116]	; (8000780 <fsm_system_run+0x29c>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	4a1a      	ldr	r2, [pc, #104]	; (8000778 <fsm_system_run+0x294>)
 8000710:	6013      	str	r3, [r2, #0]
			}

			//STATE STRANSITION
			//button 0 is pressed, MODIFY_GREEN_MODE -> NORMAL_MODE
			if(is_pressed(1)){
 8000712:	2001      	movs	r0, #1
 8000714:	f7ff fd1a 	bl	800014c <is_pressed>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d020      	beq.n	8000760 <fsm_system_run+0x27c>
				clear_timer(6);
 800071e:	2006      	movs	r0, #6
 8000720:	f000 fa9a 	bl	8000c58 <clear_timer>
				state_led_traffic_1 = RED;
 8000724:	4b11      	ldr	r3, [pc, #68]	; (800076c <fsm_system_run+0x288>)
 8000726:	220a      	movs	r2, #10
 8000728:	601a      	str	r2, [r3, #0]
				state_led_traffic_2 = GREEN;
 800072a:	4b11      	ldr	r3, [pc, #68]	; (8000770 <fsm_system_run+0x28c>)
 800072c:	220c      	movs	r2, #12
 800072e:	601a      	str	r2, [r3, #0]
				set_timer(4, duration_time_of_RED);
 8000730:	4b10      	ldr	r3, [pc, #64]	; (8000774 <fsm_system_run+0x290>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4619      	mov	r1, r3
 8000736:	2004      	movs	r0, #4
 8000738:	f000 fa74 	bl	8000c24 <set_timer>
				set_timer(5, duration_time_of_GREEN);
 800073c:	4b0e      	ldr	r3, [pc, #56]	; (8000778 <fsm_system_run+0x294>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4619      	mov	r1, r3
 8000742:	2005      	movs	r0, #5
 8000744:	f000 fa6e 	bl	8000c24 <set_timer>
				mode = NORMAL_MODE;
 8000748:	4b07      	ldr	r3, [pc, #28]	; (8000768 <fsm_system_run+0x284>)
 800074a:	2201      	movs	r2, #1
 800074c:	601a      	str	r2, [r3, #0]
			}
		break;
 800074e:	e007      	b.n	8000760 <fsm_system_run+0x27c>
		default:
		break;
 8000750:	bf00      	nop
 8000752:	e006      	b.n	8000762 <fsm_system_run+0x27e>
		break;
 8000754:	bf00      	nop
 8000756:	e004      	b.n	8000762 <fsm_system_run+0x27e>
		break;
 8000758:	bf00      	nop
 800075a:	e002      	b.n	8000762 <fsm_system_run+0x27e>
		break;
 800075c:	bf00      	nop
 800075e:	e000      	b.n	8000762 <fsm_system_run+0x27e>
		break;
 8000760:	bf00      	nop
	}
}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	200000b0 	.word	0x200000b0
 800076c:	20000050 	.word	0x20000050
 8000770:	20000054 	.word	0x20000054
 8000774:	20000058 	.word	0x20000058
 8000778:	20000060 	.word	0x20000060
 800077c:	2000012c 	.word	0x2000012c
 8000780:	20000064 	.word	0x20000064
 8000784:	14f8b589 	.word	0x14f8b589
 8000788:	000186a0 	.word	0x000186a0
 800078c:	2000005c 	.word	0x2000005c

08000790 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000794:	f000 fbbe 	bl	8000f14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000798:	f000 f816 	bl	80007c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800079c:	f000 f8cc 	bl	8000938 <MX_GPIO_Init>
  MX_TIM2_Init();
 80007a0:	f000 f854 	bl	800084c <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80007a4:	f000 f89e 	bl	80008e4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
HAL_TIM_Base_Start_IT(&htim2);
 80007a8:	4805      	ldr	r0, [pc, #20]	; (80007c0 <main+0x30>)
 80007aa:	f001 fbe7 	bl	8001f7c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
mode = INIT_SYSTEM;
 80007ae:	4b05      	ldr	r3, [pc, #20]	; (80007c4 <main+0x34>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]


  while (1)
  {
	  fsm_for_button();
 80007b4:	f7ff fd6c 	bl	8000290 <fsm_for_button>
	  fsm_system_run();
 80007b8:	f7ff fe94 	bl	80004e4 <fsm_system_run>
	  fsm_for_button();
 80007bc:	e7fa      	b.n	80007b4 <main+0x24>
 80007be:	bf00      	nop
 80007c0:	20000130 	.word	0x20000130
 80007c4:	200000b0 	.word	0x200000b0

080007c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b090      	sub	sp, #64	; 0x40
 80007cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ce:	f107 0318 	add.w	r3, r7, #24
 80007d2:	2228      	movs	r2, #40	; 0x28
 80007d4:	2100      	movs	r1, #0
 80007d6:	4618      	mov	r0, r3
 80007d8:	f002 fb84 	bl	8002ee4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007dc:	1d3b      	adds	r3, r7, #4
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	605a      	str	r2, [r3, #4]
 80007e4:	609a      	str	r2, [r3, #8]
 80007e6:	60da      	str	r2, [r3, #12]
 80007e8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007ea:	2302      	movs	r3, #2
 80007ec:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007ee:	2301      	movs	r3, #1
 80007f0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007f2:	2310      	movs	r3, #16
 80007f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007f6:	2302      	movs	r3, #2
 80007f8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80007fa:	2300      	movs	r3, #0
 80007fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80007fe:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000802:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000804:	f107 0318 	add.w	r3, r7, #24
 8000808:	4618      	mov	r0, r3
 800080a:	f000 ff4d 	bl	80016a8 <HAL_RCC_OscConfig>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000814:	f000 f916 	bl	8000a44 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000818:	230f      	movs	r3, #15
 800081a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800081c:	2302      	movs	r3, #2
 800081e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000820:	2300      	movs	r3, #0
 8000822:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000824:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000828:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800082a:	2300      	movs	r3, #0
 800082c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	2102      	movs	r1, #2
 8000832:	4618      	mov	r0, r3
 8000834:	f001 f9b8 	bl	8001ba8 <HAL_RCC_ClockConfig>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800083e:	f000 f901 	bl	8000a44 <Error_Handler>
  }
}
 8000842:	bf00      	nop
 8000844:	3740      	adds	r7, #64	; 0x40
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
	...

0800084c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b086      	sub	sp, #24
 8000850:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000852:	f107 0308 	add.w	r3, r7, #8
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	605a      	str	r2, [r3, #4]
 800085c:	609a      	str	r2, [r3, #8]
 800085e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000860:	463b      	mov	r3, r7
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000868:	4b1d      	ldr	r3, [pc, #116]	; (80008e0 <MX_TIM2_Init+0x94>)
 800086a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800086e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63999;
 8000870:	4b1b      	ldr	r3, [pc, #108]	; (80008e0 <MX_TIM2_Init+0x94>)
 8000872:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000876:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000878:	4b19      	ldr	r3, [pc, #100]	; (80008e0 <MX_TIM2_Init+0x94>)
 800087a:	2200      	movs	r2, #0
 800087c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800087e:	4b18      	ldr	r3, [pc, #96]	; (80008e0 <MX_TIM2_Init+0x94>)
 8000880:	2209      	movs	r2, #9
 8000882:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000884:	4b16      	ldr	r3, [pc, #88]	; (80008e0 <MX_TIM2_Init+0x94>)
 8000886:	2200      	movs	r2, #0
 8000888:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800088a:	4b15      	ldr	r3, [pc, #84]	; (80008e0 <MX_TIM2_Init+0x94>)
 800088c:	2200      	movs	r2, #0
 800088e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000890:	4813      	ldr	r0, [pc, #76]	; (80008e0 <MX_TIM2_Init+0x94>)
 8000892:	f001 fb23 	bl	8001edc <HAL_TIM_Base_Init>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800089c:	f000 f8d2 	bl	8000a44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008a4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008a6:	f107 0308 	add.w	r3, r7, #8
 80008aa:	4619      	mov	r1, r3
 80008ac:	480c      	ldr	r0, [pc, #48]	; (80008e0 <MX_TIM2_Init+0x94>)
 80008ae:	f001 fcb9 	bl	8002224 <HAL_TIM_ConfigClockSource>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80008b8:	f000 f8c4 	bl	8000a44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008bc:	2300      	movs	r3, #0
 80008be:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008c0:	2300      	movs	r3, #0
 80008c2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008c4:	463b      	mov	r3, r7
 80008c6:	4619      	mov	r1, r3
 80008c8:	4805      	ldr	r0, [pc, #20]	; (80008e0 <MX_TIM2_Init+0x94>)
 80008ca:	f001 fe81 	bl	80025d0 <HAL_TIMEx_MasterConfigSynchronization>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80008d4:	f000 f8b6 	bl	8000a44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008d8:	bf00      	nop
 80008da:	3718      	adds	r7, #24
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	20000130 	.word	0x20000130

080008e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008e8:	4b11      	ldr	r3, [pc, #68]	; (8000930 <MX_USART2_UART_Init+0x4c>)
 80008ea:	4a12      	ldr	r2, [pc, #72]	; (8000934 <MX_USART2_UART_Init+0x50>)
 80008ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80008ee:	4b10      	ldr	r3, [pc, #64]	; (8000930 <MX_USART2_UART_Init+0x4c>)
 80008f0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80008f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008f6:	4b0e      	ldr	r3, [pc, #56]	; (8000930 <MX_USART2_UART_Init+0x4c>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008fc:	4b0c      	ldr	r3, [pc, #48]	; (8000930 <MX_USART2_UART_Init+0x4c>)
 80008fe:	2200      	movs	r2, #0
 8000900:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000902:	4b0b      	ldr	r3, [pc, #44]	; (8000930 <MX_USART2_UART_Init+0x4c>)
 8000904:	2200      	movs	r2, #0
 8000906:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000908:	4b09      	ldr	r3, [pc, #36]	; (8000930 <MX_USART2_UART_Init+0x4c>)
 800090a:	220c      	movs	r2, #12
 800090c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800090e:	4b08      	ldr	r3, [pc, #32]	; (8000930 <MX_USART2_UART_Init+0x4c>)
 8000910:	2200      	movs	r2, #0
 8000912:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000914:	4b06      	ldr	r3, [pc, #24]	; (8000930 <MX_USART2_UART_Init+0x4c>)
 8000916:	2200      	movs	r2, #0
 8000918:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800091a:	4805      	ldr	r0, [pc, #20]	; (8000930 <MX_USART2_UART_Init+0x4c>)
 800091c:	f001 fec2 	bl	80026a4 <HAL_UART_Init>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000926:	f000 f88d 	bl	8000a44 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	20000178 	.word	0x20000178
 8000934:	40004400 	.word	0x40004400

08000938 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b086      	sub	sp, #24
 800093c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093e:	f107 0308 	add.w	r3, r7, #8
 8000942:	2200      	movs	r2, #0
 8000944:	601a      	str	r2, [r3, #0]
 8000946:	605a      	str	r2, [r3, #4]
 8000948:	609a      	str	r2, [r3, #8]
 800094a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800094c:	4b34      	ldr	r3, [pc, #208]	; (8000a20 <MX_GPIO_Init+0xe8>)
 800094e:	699b      	ldr	r3, [r3, #24]
 8000950:	4a33      	ldr	r2, [pc, #204]	; (8000a20 <MX_GPIO_Init+0xe8>)
 8000952:	f043 0304 	orr.w	r3, r3, #4
 8000956:	6193      	str	r3, [r2, #24]
 8000958:	4b31      	ldr	r3, [pc, #196]	; (8000a20 <MX_GPIO_Init+0xe8>)
 800095a:	699b      	ldr	r3, [r3, #24]
 800095c:	f003 0304 	and.w	r3, r3, #4
 8000960:	607b      	str	r3, [r7, #4]
 8000962:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000964:	4b2e      	ldr	r3, [pc, #184]	; (8000a20 <MX_GPIO_Init+0xe8>)
 8000966:	699b      	ldr	r3, [r3, #24]
 8000968:	4a2d      	ldr	r2, [pc, #180]	; (8000a20 <MX_GPIO_Init+0xe8>)
 800096a:	f043 0308 	orr.w	r3, r3, #8
 800096e:	6193      	str	r3, [r2, #24]
 8000970:	4b2b      	ldr	r3, [pc, #172]	; (8000a20 <MX_GPIO_Init+0xe8>)
 8000972:	699b      	ldr	r3, [r3, #24]
 8000974:	f003 0308 	and.w	r3, r3, #8
 8000978:	603b      	str	r3, [r7, #0]
 800097a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_Pin|D3_Pin|D5_Pin|D4_Pin, GPIO_PIN_RESET);
 800097c:	2200      	movs	r2, #0
 800097e:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000982:	4828      	ldr	r0, [pc, #160]	; (8000a24 <MX_GPIO_Init+0xec>)
 8000984:	f000 fe77 	bl	8001676 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D7_Pin|D2_Pin, GPIO_PIN_RESET);
 8000988:	2200      	movs	r2, #0
 800098a:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 800098e:	4826      	ldr	r0, [pc, #152]	; (8000a28 <MX_GPIO_Init+0xf0>)
 8000990:	f000 fe71 	bl	8001676 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin;
 8000994:	2303      	movs	r3, #3
 8000996:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000998:	2300      	movs	r3, #0
 800099a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800099c:	2301      	movs	r3, #1
 800099e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a0:	f107 0308 	add.w	r3, r7, #8
 80009a4:	4619      	mov	r1, r3
 80009a6:	4820      	ldr	r0, [pc, #128]	; (8000a28 <MX_GPIO_Init+0xf0>)
 80009a8:	f000 fcd4 	bl	8001354 <HAL_GPIO_Init>

  /*Configure GPIO pin : A2_Pin */
  GPIO_InitStruct.Pin = A2_Pin;
 80009ac:	2310      	movs	r3, #16
 80009ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b0:	2300      	movs	r3, #0
 80009b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(A2_GPIO_Port, &GPIO_InitStruct);
 80009b8:	f107 0308 	add.w	r3, r7, #8
 80009bc:	4619      	mov	r1, r3
 80009be:	481a      	ldr	r0, [pc, #104]	; (8000a28 <MX_GPIO_Init+0xf0>)
 80009c0:	f000 fcc8 	bl	8001354 <HAL_GPIO_Init>

  /*Configure GPIO pin : A3_Pin */
  GPIO_InitStruct.Pin = A3_Pin;
 80009c4:	2301      	movs	r3, #1
 80009c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c8:	2300      	movs	r3, #0
 80009ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009cc:	2301      	movs	r3, #1
 80009ce:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(A3_GPIO_Port, &GPIO_InitStruct);
 80009d0:	f107 0308 	add.w	r3, r7, #8
 80009d4:	4619      	mov	r1, r3
 80009d6:	4813      	ldr	r0, [pc, #76]	; (8000a24 <MX_GPIO_Init+0xec>)
 80009d8:	f000 fcbc 	bl	8001354 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pin D3_Pin D5_Pin D4_Pin */
  GPIO_InitStruct.Pin = D6_Pin|D3_Pin|D5_Pin|D4_Pin;
 80009dc:	f44f 6387 	mov.w	r3, #1080	; 0x438
 80009e0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e2:	2301      	movs	r3, #1
 80009e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e6:	2300      	movs	r3, #0
 80009e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ea:	2302      	movs	r3, #2
 80009ec:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ee:	f107 0308 	add.w	r3, r7, #8
 80009f2:	4619      	mov	r1, r3
 80009f4:	480b      	ldr	r0, [pc, #44]	; (8000a24 <MX_GPIO_Init+0xec>)
 80009f6:	f000 fcad 	bl	8001354 <HAL_GPIO_Init>

  /*Configure GPIO pins : D7_Pin D2_Pin */
  GPIO_InitStruct.Pin = D7_Pin|D2_Pin;
 80009fa:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80009fe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a00:	2301      	movs	r3, #1
 8000a02:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	2300      	movs	r3, #0
 8000a06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0c:	f107 0308 	add.w	r3, r7, #8
 8000a10:	4619      	mov	r1, r3
 8000a12:	4805      	ldr	r0, [pc, #20]	; (8000a28 <MX_GPIO_Init+0xf0>)
 8000a14:	f000 fc9e 	bl	8001354 <HAL_GPIO_Init>

}
 8000a18:	bf00      	nop
 8000a1a:	3718      	adds	r7, #24
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	40021000 	.word	0x40021000
 8000a24:	40010c00 	.word	0x40010c00
 8000a28:	40010800 	.word	0x40010800

08000a2c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
	read_input();
 8000a34:	f7ff fba8 	bl	8000188 <read_input>
	timer_run();
 8000a38:	f000 f940 	bl	8000cbc <timer_run>
}
 8000a3c:	bf00      	nop
 8000a3e:	3708      	adds	r7, #8
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}

08000a44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a48:	b672      	cpsid	i
}
 8000a4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a4c:	e7fe      	b.n	8000a4c <Error_Handler+0x8>
	...

08000a50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b085      	sub	sp, #20
 8000a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a56:	4b15      	ldr	r3, [pc, #84]	; (8000aac <HAL_MspInit+0x5c>)
 8000a58:	699b      	ldr	r3, [r3, #24]
 8000a5a:	4a14      	ldr	r2, [pc, #80]	; (8000aac <HAL_MspInit+0x5c>)
 8000a5c:	f043 0301 	orr.w	r3, r3, #1
 8000a60:	6193      	str	r3, [r2, #24]
 8000a62:	4b12      	ldr	r3, [pc, #72]	; (8000aac <HAL_MspInit+0x5c>)
 8000a64:	699b      	ldr	r3, [r3, #24]
 8000a66:	f003 0301 	and.w	r3, r3, #1
 8000a6a:	60bb      	str	r3, [r7, #8]
 8000a6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a6e:	4b0f      	ldr	r3, [pc, #60]	; (8000aac <HAL_MspInit+0x5c>)
 8000a70:	69db      	ldr	r3, [r3, #28]
 8000a72:	4a0e      	ldr	r2, [pc, #56]	; (8000aac <HAL_MspInit+0x5c>)
 8000a74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a78:	61d3      	str	r3, [r2, #28]
 8000a7a:	4b0c      	ldr	r3, [pc, #48]	; (8000aac <HAL_MspInit+0x5c>)
 8000a7c:	69db      	ldr	r3, [r3, #28]
 8000a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a82:	607b      	str	r3, [r7, #4]
 8000a84:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a86:	4b0a      	ldr	r3, [pc, #40]	; (8000ab0 <HAL_MspInit+0x60>)
 8000a88:	685b      	ldr	r3, [r3, #4]
 8000a8a:	60fb      	str	r3, [r7, #12]
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000a92:	60fb      	str	r3, [r7, #12]
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a9a:	60fb      	str	r3, [r7, #12]
 8000a9c:	4a04      	ldr	r2, [pc, #16]	; (8000ab0 <HAL_MspInit+0x60>)
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	3714      	adds	r7, #20
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bc80      	pop	{r7}
 8000aaa:	4770      	bx	lr
 8000aac:	40021000 	.word	0x40021000
 8000ab0:	40010000 	.word	0x40010000

08000ab4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ac4:	d113      	bne.n	8000aee <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ac6:	4b0c      	ldr	r3, [pc, #48]	; (8000af8 <HAL_TIM_Base_MspInit+0x44>)
 8000ac8:	69db      	ldr	r3, [r3, #28]
 8000aca:	4a0b      	ldr	r2, [pc, #44]	; (8000af8 <HAL_TIM_Base_MspInit+0x44>)
 8000acc:	f043 0301 	orr.w	r3, r3, #1
 8000ad0:	61d3      	str	r3, [r2, #28]
 8000ad2:	4b09      	ldr	r3, [pc, #36]	; (8000af8 <HAL_TIM_Base_MspInit+0x44>)
 8000ad4:	69db      	ldr	r3, [r3, #28]
 8000ad6:	f003 0301 	and.w	r3, r3, #1
 8000ada:	60fb      	str	r3, [r7, #12]
 8000adc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	201c      	movs	r0, #28
 8000ae4:	f000 fb4f 	bl	8001186 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ae8:	201c      	movs	r0, #28
 8000aea:	f000 fb68 	bl	80011be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000aee:	bf00      	nop
 8000af0:	3710      	adds	r7, #16
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	40021000 	.word	0x40021000

08000afc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b088      	sub	sp, #32
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b04:	f107 0310 	add.w	r3, r7, #16
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	605a      	str	r2, [r3, #4]
 8000b0e:	609a      	str	r2, [r3, #8]
 8000b10:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4a1f      	ldr	r2, [pc, #124]	; (8000b94 <HAL_UART_MspInit+0x98>)
 8000b18:	4293      	cmp	r3, r2
 8000b1a:	d137      	bne.n	8000b8c <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b1c:	4b1e      	ldr	r3, [pc, #120]	; (8000b98 <HAL_UART_MspInit+0x9c>)
 8000b1e:	69db      	ldr	r3, [r3, #28]
 8000b20:	4a1d      	ldr	r2, [pc, #116]	; (8000b98 <HAL_UART_MspInit+0x9c>)
 8000b22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b26:	61d3      	str	r3, [r2, #28]
 8000b28:	4b1b      	ldr	r3, [pc, #108]	; (8000b98 <HAL_UART_MspInit+0x9c>)
 8000b2a:	69db      	ldr	r3, [r3, #28]
 8000b2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b30:	60fb      	str	r3, [r7, #12]
 8000b32:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b34:	4b18      	ldr	r3, [pc, #96]	; (8000b98 <HAL_UART_MspInit+0x9c>)
 8000b36:	699b      	ldr	r3, [r3, #24]
 8000b38:	4a17      	ldr	r2, [pc, #92]	; (8000b98 <HAL_UART_MspInit+0x9c>)
 8000b3a:	f043 0304 	orr.w	r3, r3, #4
 8000b3e:	6193      	str	r3, [r2, #24]
 8000b40:	4b15      	ldr	r3, [pc, #84]	; (8000b98 <HAL_UART_MspInit+0x9c>)
 8000b42:	699b      	ldr	r3, [r3, #24]
 8000b44:	f003 0304 	and.w	r3, r3, #4
 8000b48:	60bb      	str	r3, [r7, #8]
 8000b4a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b4c:	2304      	movs	r3, #4
 8000b4e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b50:	2302      	movs	r3, #2
 8000b52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b54:	2303      	movs	r3, #3
 8000b56:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b58:	f107 0310 	add.w	r3, r7, #16
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	480f      	ldr	r0, [pc, #60]	; (8000b9c <HAL_UART_MspInit+0xa0>)
 8000b60:	f000 fbf8 	bl	8001354 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b64:	2308      	movs	r3, #8
 8000b66:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b70:	f107 0310 	add.w	r3, r7, #16
 8000b74:	4619      	mov	r1, r3
 8000b76:	4809      	ldr	r0, [pc, #36]	; (8000b9c <HAL_UART_MspInit+0xa0>)
 8000b78:	f000 fbec 	bl	8001354 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	2100      	movs	r1, #0
 8000b80:	2026      	movs	r0, #38	; 0x26
 8000b82:	f000 fb00 	bl	8001186 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b86:	2026      	movs	r0, #38	; 0x26
 8000b88:	f000 fb19 	bl	80011be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b8c:	bf00      	nop
 8000b8e:	3720      	adds	r7, #32
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	40004400 	.word	0x40004400
 8000b98:	40021000 	.word	0x40021000
 8000b9c:	40010800 	.word	0x40010800

08000ba0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ba4:	e7fe      	b.n	8000ba4 <NMI_Handler+0x4>

08000ba6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000baa:	e7fe      	b.n	8000baa <HardFault_Handler+0x4>

08000bac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bb0:	e7fe      	b.n	8000bb0 <MemManage_Handler+0x4>

08000bb2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bb6:	e7fe      	b.n	8000bb6 <BusFault_Handler+0x4>

08000bb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bbc:	e7fe      	b.n	8000bbc <UsageFault_Handler+0x4>

08000bbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bc80      	pop	{r7}
 8000bc8:	4770      	bx	lr

08000bca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bc80      	pop	{r7}
 8000bd4:	4770      	bx	lr

08000bd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bc80      	pop	{r7}
 8000be0:	4770      	bx	lr

08000be2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000be2:	b580      	push	{r7, lr}
 8000be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000be6:	f000 f9db 	bl	8000fa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}
	...

08000bf0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000bf4:	4802      	ldr	r0, [pc, #8]	; (8000c00 <TIM2_IRQHandler+0x10>)
 8000bf6:	f001 fa0d 	bl	8002014 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	20000130 	.word	0x20000130

08000c04 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c08:	4802      	ldr	r0, [pc, #8]	; (8000c14 <USART2_IRQHandler+0x10>)
 8000c0a:	f001 fd99 	bl	8002740 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	20000178 	.word	0x20000178

08000c18 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bc80      	pop	{r7}
 8000c22:	4770      	bx	lr

08000c24 <set_timer>:
#include "timer.h"

int timer_counter[NUMBER_OF_TIMER] = {0};
int timer_flag[NUMBER_OF_TIMER] = {0};

void set_timer(int index, int duration){
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
 8000c2c:	6039      	str	r1, [r7, #0]
	timer_counter[index] = duration/TIME_CYCLE;
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	4a07      	ldr	r2, [pc, #28]	; (8000c50 <set_timer+0x2c>)
 8000c32:	fb82 1203 	smull	r1, r2, r2, r3
 8000c36:	1092      	asrs	r2, r2, #2
 8000c38:	17db      	asrs	r3, r3, #31
 8000c3a:	1ad2      	subs	r2, r2, r3
 8000c3c:	4905      	ldr	r1, [pc, #20]	; (8000c54 <set_timer+0x30>)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000c44:	bf00      	nop
 8000c46:	370c      	adds	r7, #12
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bc80      	pop	{r7}
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	66666667 	.word	0x66666667
 8000c54:	200000b4 	.word	0x200000b4

08000c58 <clear_timer>:
void clear_timer(int index){
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
	timer_counter[index] = 0;
 8000c60:	4a07      	ldr	r2, [pc, #28]	; (8000c80 <clear_timer+0x28>)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	2100      	movs	r1, #0
 8000c66:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	timer_flag[index] = 0;
 8000c6a:	4a06      	ldr	r2, [pc, #24]	; (8000c84 <clear_timer+0x2c>)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	2100      	movs	r1, #0
 8000c70:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000c74:	bf00      	nop
 8000c76:	370c      	adds	r7, #12
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bc80      	pop	{r7}
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	200000b4 	.word	0x200000b4
 8000c84:	200000f0 	.word	0x200000f0

08000c88 <is_timer_timeout>:
int get_time_of_counter(int index){
	return timer_counter[index]*TIME_CYCLE;
}


int is_timer_timeout(int index){
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
	if(timer_flag[index]){
 8000c90:	4a09      	ldr	r2, [pc, #36]	; (8000cb8 <is_timer_timeout+0x30>)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d006      	beq.n	8000caa <is_timer_timeout+0x22>
		timer_flag[index] = 0;
 8000c9c:	4a06      	ldr	r2, [pc, #24]	; (8000cb8 <is_timer_timeout+0x30>)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	e000      	b.n	8000cac <is_timer_timeout+0x24>
	}
	return 0;
 8000caa:	2300      	movs	r3, #0
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	370c      	adds	r7, #12
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bc80      	pop	{r7}
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	200000f0 	.word	0x200000f0

08000cbc <timer_run>:
void timer_run(){
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
	for(int i = 0 ; i < NUMBER_OF_TIMER; ++i){
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	607b      	str	r3, [r7, #4]
 8000cc6:	e01c      	b.n	8000d02 <timer_run+0x46>
		if(timer_counter[i] > 0){
 8000cc8:	4a12      	ldr	r2, [pc, #72]	; (8000d14 <timer_run+0x58>)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	dd13      	ble.n	8000cfc <timer_run+0x40>
			timer_counter[i]--;
 8000cd4:	4a0f      	ldr	r2, [pc, #60]	; (8000d14 <timer_run+0x58>)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cdc:	1e5a      	subs	r2, r3, #1
 8000cde:	490d      	ldr	r1, [pc, #52]	; (8000d14 <timer_run+0x58>)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(timer_counter[i] <= 0) timer_flag[i] = 1;
 8000ce6:	4a0b      	ldr	r2, [pc, #44]	; (8000d14 <timer_run+0x58>)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	dc04      	bgt.n	8000cfc <timer_run+0x40>
 8000cf2:	4a09      	ldr	r2, [pc, #36]	; (8000d18 <timer_run+0x5c>)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	2101      	movs	r1, #1
 8000cf8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0 ; i < NUMBER_OF_TIMER; ++i){
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	3301      	adds	r3, #1
 8000d00:	607b      	str	r3, [r7, #4]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	2b0e      	cmp	r3, #14
 8000d06:	dddf      	ble.n	8000cc8 <timer_run+0xc>
		}
	}
}
 8000d08:	bf00      	nop
 8000d0a:	bf00      	nop
 8000d0c:	370c      	adds	r7, #12
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bc80      	pop	{r7}
 8000d12:	4770      	bx	lr
 8000d14:	200000b4 	.word	0x200000b4
 8000d18:	200000f0 	.word	0x200000f0

08000d1c <turn_on_traffic_led_1>:
#include "traffic_led.h"

int is_on = 0;


void turn_on_traffic_led_1(int state){
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
	switch(state){
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	2b0c      	cmp	r3, #12
 8000d28:	d021      	beq.n	8000d6e <turn_on_traffic_led_1+0x52>
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	2b0c      	cmp	r3, #12
 8000d2e:	dc2a      	bgt.n	8000d86 <turn_on_traffic_led_1+0x6a>
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	2b0a      	cmp	r3, #10
 8000d34:	d003      	beq.n	8000d3e <turn_on_traffic_led_1+0x22>
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	2b0b      	cmp	r3, #11
 8000d3a:	d00c      	beq.n	8000d56 <turn_on_traffic_led_1+0x3a>
			HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
		break;

		default:
		break;
 8000d3c:	e023      	b.n	8000d86 <turn_on_traffic_led_1+0x6a>
			HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 8000d3e:	2201      	movs	r2, #1
 8000d40:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d44:	4812      	ldr	r0, [pc, #72]	; (8000d90 <turn_on_traffic_led_1+0x74>)
 8000d46:	f000 fc96 	bl	8001676 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	2108      	movs	r1, #8
 8000d4e:	4811      	ldr	r0, [pc, #68]	; (8000d94 <turn_on_traffic_led_1+0x78>)
 8000d50:	f000 fc91 	bl	8001676 <HAL_GPIO_WritePin>
		break;
 8000d54:	e018      	b.n	8000d88 <turn_on_traffic_led_1+0x6c>
			HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 8000d56:	2201      	movs	r2, #1
 8000d58:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d5c:	480c      	ldr	r0, [pc, #48]	; (8000d90 <turn_on_traffic_led_1+0x74>)
 8000d5e:	f000 fc8a 	bl	8001676 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 8000d62:	2201      	movs	r2, #1
 8000d64:	2108      	movs	r1, #8
 8000d66:	480b      	ldr	r0, [pc, #44]	; (8000d94 <turn_on_traffic_led_1+0x78>)
 8000d68:	f000 fc85 	bl	8001676 <HAL_GPIO_WritePin>
		break;
 8000d6c:	e00c      	b.n	8000d88 <turn_on_traffic_led_1+0x6c>
			HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d74:	4806      	ldr	r0, [pc, #24]	; (8000d90 <turn_on_traffic_led_1+0x74>)
 8000d76:	f000 fc7e 	bl	8001676 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	2108      	movs	r1, #8
 8000d7e:	4805      	ldr	r0, [pc, #20]	; (8000d94 <turn_on_traffic_led_1+0x78>)
 8000d80:	f000 fc79 	bl	8001676 <HAL_GPIO_WritePin>
		break;
 8000d84:	e000      	b.n	8000d88 <turn_on_traffic_led_1+0x6c>
		break;
 8000d86:	bf00      	nop
	}
}
 8000d88:	bf00      	nop
 8000d8a:	3708      	adds	r7, #8
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	40010800 	.word	0x40010800
 8000d94:	40010c00 	.word	0x40010c00

08000d98 <turn_off_traffic_led_1>:

void turn_off_traffic_led_1(){
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000da2:	4805      	ldr	r0, [pc, #20]	; (8000db8 <turn_off_traffic_led_1+0x20>)
 8000da4:	f000 fc67 	bl	8001676 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 8000da8:	2200      	movs	r2, #0
 8000daa:	2108      	movs	r1, #8
 8000dac:	4803      	ldr	r0, [pc, #12]	; (8000dbc <turn_off_traffic_led_1+0x24>)
 8000dae:	f000 fc62 	bl	8001676 <HAL_GPIO_WritePin>
}
 8000db2:	bf00      	nop
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	40010800 	.word	0x40010800
 8000dbc:	40010c00 	.word	0x40010c00

08000dc0 <turn_on_traffic_led_2>:

void turn_on_traffic_led_2(int state){
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	3b0a      	subs	r3, #10
 8000dcc:	2b04      	cmp	r3, #4
 8000dce:	d839      	bhi.n	8000e44 <turn_on_traffic_led_2+0x84>
 8000dd0:	a201      	add	r2, pc, #4	; (adr r2, 8000dd8 <turn_on_traffic_led_2+0x18>)
 8000dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dd6:	bf00      	nop
 8000dd8:	08000ded 	.word	0x08000ded
 8000ddc:	08000e03 	.word	0x08000e03
 8000de0:	08000e19 	.word	0x08000e19
 8000de4:	08000e45 	.word	0x08000e45
 8000de8:	08000e2f 	.word	0x08000e2f
	switch(state){
		case RED:
			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 8000dec:	2201      	movs	r2, #1
 8000dee:	2120      	movs	r1, #32
 8000df0:	4817      	ldr	r0, [pc, #92]	; (8000e50 <turn_on_traffic_led_2+0x90>)
 8000df2:	f000 fc40 	bl	8001676 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 8000df6:	2200      	movs	r2, #0
 8000df8:	2110      	movs	r1, #16
 8000dfa:	4815      	ldr	r0, [pc, #84]	; (8000e50 <turn_on_traffic_led_2+0x90>)
 8000dfc:	f000 fc3b 	bl	8001676 <HAL_GPIO_WritePin>
		break;
 8000e00:	e021      	b.n	8000e46 <turn_on_traffic_led_2+0x86>
		case YELLOW:
			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 8000e02:	2201      	movs	r2, #1
 8000e04:	2120      	movs	r1, #32
 8000e06:	4812      	ldr	r0, [pc, #72]	; (8000e50 <turn_on_traffic_led_2+0x90>)
 8000e08:	f000 fc35 	bl	8001676 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	2110      	movs	r1, #16
 8000e10:	480f      	ldr	r0, [pc, #60]	; (8000e50 <turn_on_traffic_led_2+0x90>)
 8000e12:	f000 fc30 	bl	8001676 <HAL_GPIO_WritePin>
		break;
 8000e16:	e016      	b.n	8000e46 <turn_on_traffic_led_2+0x86>
		case GREEN:
			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 8000e18:	2200      	movs	r2, #0
 8000e1a:	2120      	movs	r1, #32
 8000e1c:	480c      	ldr	r0, [pc, #48]	; (8000e50 <turn_on_traffic_led_2+0x90>)
 8000e1e:	f000 fc2a 	bl	8001676 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 8000e22:	2201      	movs	r2, #1
 8000e24:	2110      	movs	r1, #16
 8000e26:	480a      	ldr	r0, [pc, #40]	; (8000e50 <turn_on_traffic_led_2+0x90>)
 8000e28:	f000 fc25 	bl	8001676 <HAL_GPIO_WritePin>
		break;
 8000e2c:	e00b      	b.n	8000e46 <turn_on_traffic_led_2+0x86>
		case OFF:
			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 8000e2e:	2200      	movs	r2, #0
 8000e30:	2120      	movs	r1, #32
 8000e32:	4807      	ldr	r0, [pc, #28]	; (8000e50 <turn_on_traffic_led_2+0x90>)
 8000e34:	f000 fc1f 	bl	8001676 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 8000e38:	2200      	movs	r2, #0
 8000e3a:	2110      	movs	r1, #16
 8000e3c:	4804      	ldr	r0, [pc, #16]	; (8000e50 <turn_on_traffic_led_2+0x90>)
 8000e3e:	f000 fc1a 	bl	8001676 <HAL_GPIO_WritePin>
		break;
 8000e42:	e000      	b.n	8000e46 <turn_on_traffic_led_2+0x86>
		default:
		break;
 8000e44:	bf00      	nop
	}
}
 8000e46:	bf00      	nop
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	40010c00 	.word	0x40010c00

08000e54 <turn_off_traffic_led_2>:
void turn_off_traffic_led_2(){
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	2120      	movs	r1, #32
 8000e5c:	4804      	ldr	r0, [pc, #16]	; (8000e70 <turn_off_traffic_led_2+0x1c>)
 8000e5e:	f000 fc0a 	bl	8001676 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 8000e62:	2200      	movs	r2, #0
 8000e64:	2110      	movs	r1, #16
 8000e66:	4802      	ldr	r0, [pc, #8]	; (8000e70 <turn_off_traffic_led_2+0x1c>)
 8000e68:	f000 fc05 	bl	8001676 <HAL_GPIO_WritePin>
}
 8000e6c:	bf00      	nop
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	40010c00 	.word	0x40010c00

08000e74 <blinking_led_traffic>:




void blinking_led_traffic(int state){
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
	if(is_timer_timeout( 6 )){
 8000e7c:	2006      	movs	r0, #6
 8000e7e:	f7ff ff03 	bl	8000c88 <is_timer_timeout>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d019      	beq.n	8000ebc <blinking_led_traffic+0x48>
		if(is_on){
 8000e88:	4b0e      	ldr	r3, [pc, #56]	; (8000ec4 <blinking_led_traffic+0x50>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d009      	beq.n	8000ea4 <blinking_led_traffic+0x30>
			turn_on_traffic_led_1(state);
 8000e90:	6878      	ldr	r0, [r7, #4]
 8000e92:	f7ff ff43 	bl	8000d1c <turn_on_traffic_led_1>
			turn_on_traffic_led_2(state);
 8000e96:	6878      	ldr	r0, [r7, #4]
 8000e98:	f7ff ff92 	bl	8000dc0 <turn_on_traffic_led_2>
			is_on = 0;
 8000e9c:	4b09      	ldr	r3, [pc, #36]	; (8000ec4 <blinking_led_traffic+0x50>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	601a      	str	r2, [r3, #0]
 8000ea2:	e006      	b.n	8000eb2 <blinking_led_traffic+0x3e>
		}
		else{
			turn_off_traffic_led_1();
 8000ea4:	f7ff ff78 	bl	8000d98 <turn_off_traffic_led_1>
			turn_off_traffic_led_2();
 8000ea8:	f7ff ffd4 	bl	8000e54 <turn_off_traffic_led_2>
			is_on = 1;
 8000eac:	4b05      	ldr	r3, [pc, #20]	; (8000ec4 <blinking_led_traffic+0x50>)
 8000eae:	2201      	movs	r2, #1
 8000eb0:	601a      	str	r2, [r3, #0]
		}
		set_timer(6, 500);
 8000eb2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000eb6:	2006      	movs	r0, #6
 8000eb8:	f7ff feb4 	bl	8000c24 <set_timer>
	}
}
 8000ebc:	bf00      	nop
 8000ebe:	3708      	adds	r7, #8
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	2000012c 	.word	0x2000012c

08000ec8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ec8:	480c      	ldr	r0, [pc, #48]	; (8000efc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000eca:	490d      	ldr	r1, [pc, #52]	; (8000f00 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ecc:	4a0d      	ldr	r2, [pc, #52]	; (8000f04 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ece:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ed0:	e002      	b.n	8000ed8 <LoopCopyDataInit>

08000ed2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ed2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ed4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ed6:	3304      	adds	r3, #4

08000ed8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ed8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000edc:	d3f9      	bcc.n	8000ed2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ede:	4a0a      	ldr	r2, [pc, #40]	; (8000f08 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ee0:	4c0a      	ldr	r4, [pc, #40]	; (8000f0c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ee2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ee4:	e001      	b.n	8000eea <LoopFillZerobss>

08000ee6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ee6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ee8:	3204      	adds	r2, #4

08000eea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eec:	d3fb      	bcc.n	8000ee6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000eee:	f7ff fe93 	bl	8000c18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ef2:	f001 ffd3 	bl	8002e9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ef6:	f7ff fc4b 	bl	8000790 <main>
  bx lr
 8000efa:	4770      	bx	lr
  ldr r0, =_sdata
 8000efc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f00:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000f04:	08002f3c 	.word	0x08002f3c
  ldr r2, =_sbss
 8000f08:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000f0c:	200001c0 	.word	0x200001c0

08000f10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f10:	e7fe      	b.n	8000f10 <ADC1_2_IRQHandler>
	...

08000f14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f18:	4b08      	ldr	r3, [pc, #32]	; (8000f3c <HAL_Init+0x28>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a07      	ldr	r2, [pc, #28]	; (8000f3c <HAL_Init+0x28>)
 8000f1e:	f043 0310 	orr.w	r3, r3, #16
 8000f22:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f24:	2003      	movs	r0, #3
 8000f26:	f000 f923 	bl	8001170 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f2a:	200f      	movs	r0, #15
 8000f2c:	f000 f808 	bl	8000f40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f30:	f7ff fd8e 	bl	8000a50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f34:	2300      	movs	r3, #0
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	40022000 	.word	0x40022000

08000f40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f48:	4b12      	ldr	r3, [pc, #72]	; (8000f94 <HAL_InitTick+0x54>)
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	4b12      	ldr	r3, [pc, #72]	; (8000f98 <HAL_InitTick+0x58>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	4619      	mov	r1, r3
 8000f52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f000 f93b 	bl	80011da <HAL_SYSTICK_Config>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e00e      	b.n	8000f8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2b0f      	cmp	r3, #15
 8000f72:	d80a      	bhi.n	8000f8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f74:	2200      	movs	r2, #0
 8000f76:	6879      	ldr	r1, [r7, #4]
 8000f78:	f04f 30ff 	mov.w	r0, #4294967295
 8000f7c:	f000 f903 	bl	8001186 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f80:	4a06      	ldr	r2, [pc, #24]	; (8000f9c <HAL_InitTick+0x5c>)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f86:	2300      	movs	r3, #0
 8000f88:	e000      	b.n	8000f8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3708      	adds	r7, #8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	20000068 	.word	0x20000068
 8000f98:	20000070 	.word	0x20000070
 8000f9c:	2000006c 	.word	0x2000006c

08000fa0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fa4:	4b05      	ldr	r3, [pc, #20]	; (8000fbc <HAL_IncTick+0x1c>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	461a      	mov	r2, r3
 8000faa:	4b05      	ldr	r3, [pc, #20]	; (8000fc0 <HAL_IncTick+0x20>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4413      	add	r3, r2
 8000fb0:	4a03      	ldr	r2, [pc, #12]	; (8000fc0 <HAL_IncTick+0x20>)
 8000fb2:	6013      	str	r3, [r2, #0]
}
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bc80      	pop	{r7}
 8000fba:	4770      	bx	lr
 8000fbc:	20000070 	.word	0x20000070
 8000fc0:	200001bc 	.word	0x200001bc

08000fc4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fc8:	4b02      	ldr	r3, [pc, #8]	; (8000fd4 <HAL_GetTick+0x10>)
 8000fca:	681b      	ldr	r3, [r3, #0]
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bc80      	pop	{r7}
 8000fd2:	4770      	bx	lr
 8000fd4:	200001bc 	.word	0x200001bc

08000fd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b085      	sub	sp, #20
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	f003 0307 	and.w	r3, r3, #7
 8000fe6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fe8:	4b0c      	ldr	r3, [pc, #48]	; (800101c <__NVIC_SetPriorityGrouping+0x44>)
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fee:	68ba      	ldr	r2, [r7, #8]
 8000ff0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001000:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001004:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001008:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800100a:	4a04      	ldr	r2, [pc, #16]	; (800101c <__NVIC_SetPriorityGrouping+0x44>)
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	60d3      	str	r3, [r2, #12]
}
 8001010:	bf00      	nop
 8001012:	3714      	adds	r7, #20
 8001014:	46bd      	mov	sp, r7
 8001016:	bc80      	pop	{r7}
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	e000ed00 	.word	0xe000ed00

08001020 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001024:	4b04      	ldr	r3, [pc, #16]	; (8001038 <__NVIC_GetPriorityGrouping+0x18>)
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	0a1b      	lsrs	r3, r3, #8
 800102a:	f003 0307 	and.w	r3, r3, #7
}
 800102e:	4618      	mov	r0, r3
 8001030:	46bd      	mov	sp, r7
 8001032:	bc80      	pop	{r7}
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	e000ed00 	.word	0xe000ed00

0800103c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104a:	2b00      	cmp	r3, #0
 800104c:	db0b      	blt.n	8001066 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800104e:	79fb      	ldrb	r3, [r7, #7]
 8001050:	f003 021f 	and.w	r2, r3, #31
 8001054:	4906      	ldr	r1, [pc, #24]	; (8001070 <__NVIC_EnableIRQ+0x34>)
 8001056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105a:	095b      	lsrs	r3, r3, #5
 800105c:	2001      	movs	r0, #1
 800105e:	fa00 f202 	lsl.w	r2, r0, r2
 8001062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001066:	bf00      	nop
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	bc80      	pop	{r7}
 800106e:	4770      	bx	lr
 8001070:	e000e100 	.word	0xe000e100

08001074 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	6039      	str	r1, [r7, #0]
 800107e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001080:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001084:	2b00      	cmp	r3, #0
 8001086:	db0a      	blt.n	800109e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	b2da      	uxtb	r2, r3
 800108c:	490c      	ldr	r1, [pc, #48]	; (80010c0 <__NVIC_SetPriority+0x4c>)
 800108e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001092:	0112      	lsls	r2, r2, #4
 8001094:	b2d2      	uxtb	r2, r2
 8001096:	440b      	add	r3, r1
 8001098:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800109c:	e00a      	b.n	80010b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	b2da      	uxtb	r2, r3
 80010a2:	4908      	ldr	r1, [pc, #32]	; (80010c4 <__NVIC_SetPriority+0x50>)
 80010a4:	79fb      	ldrb	r3, [r7, #7]
 80010a6:	f003 030f 	and.w	r3, r3, #15
 80010aa:	3b04      	subs	r3, #4
 80010ac:	0112      	lsls	r2, r2, #4
 80010ae:	b2d2      	uxtb	r2, r2
 80010b0:	440b      	add	r3, r1
 80010b2:	761a      	strb	r2, [r3, #24]
}
 80010b4:	bf00      	nop
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bc80      	pop	{r7}
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	e000e100 	.word	0xe000e100
 80010c4:	e000ed00 	.word	0xe000ed00

080010c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b089      	sub	sp, #36	; 0x24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	60b9      	str	r1, [r7, #8]
 80010d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	f003 0307 	and.w	r3, r3, #7
 80010da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	f1c3 0307 	rsb	r3, r3, #7
 80010e2:	2b04      	cmp	r3, #4
 80010e4:	bf28      	it	cs
 80010e6:	2304      	movcs	r3, #4
 80010e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	3304      	adds	r3, #4
 80010ee:	2b06      	cmp	r3, #6
 80010f0:	d902      	bls.n	80010f8 <NVIC_EncodePriority+0x30>
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	3b03      	subs	r3, #3
 80010f6:	e000      	b.n	80010fa <NVIC_EncodePriority+0x32>
 80010f8:	2300      	movs	r3, #0
 80010fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001100:	69bb      	ldr	r3, [r7, #24]
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	43da      	mvns	r2, r3
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	401a      	ands	r2, r3
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001110:	f04f 31ff 	mov.w	r1, #4294967295
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	fa01 f303 	lsl.w	r3, r1, r3
 800111a:	43d9      	mvns	r1, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001120:	4313      	orrs	r3, r2
         );
}
 8001122:	4618      	mov	r0, r3
 8001124:	3724      	adds	r7, #36	; 0x24
 8001126:	46bd      	mov	sp, r7
 8001128:	bc80      	pop	{r7}
 800112a:	4770      	bx	lr

0800112c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	3b01      	subs	r3, #1
 8001138:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800113c:	d301      	bcc.n	8001142 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800113e:	2301      	movs	r3, #1
 8001140:	e00f      	b.n	8001162 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001142:	4a0a      	ldr	r2, [pc, #40]	; (800116c <SysTick_Config+0x40>)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	3b01      	subs	r3, #1
 8001148:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800114a:	210f      	movs	r1, #15
 800114c:	f04f 30ff 	mov.w	r0, #4294967295
 8001150:	f7ff ff90 	bl	8001074 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001154:	4b05      	ldr	r3, [pc, #20]	; (800116c <SysTick_Config+0x40>)
 8001156:	2200      	movs	r2, #0
 8001158:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800115a:	4b04      	ldr	r3, [pc, #16]	; (800116c <SysTick_Config+0x40>)
 800115c:	2207      	movs	r2, #7
 800115e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001160:	2300      	movs	r3, #0
}
 8001162:	4618      	mov	r0, r3
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	e000e010 	.word	0xe000e010

08001170 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	f7ff ff2d 	bl	8000fd8 <__NVIC_SetPriorityGrouping>
}
 800117e:	bf00      	nop
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001186:	b580      	push	{r7, lr}
 8001188:	b086      	sub	sp, #24
 800118a:	af00      	add	r7, sp, #0
 800118c:	4603      	mov	r3, r0
 800118e:	60b9      	str	r1, [r7, #8]
 8001190:	607a      	str	r2, [r7, #4]
 8001192:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001194:	2300      	movs	r3, #0
 8001196:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001198:	f7ff ff42 	bl	8001020 <__NVIC_GetPriorityGrouping>
 800119c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	68b9      	ldr	r1, [r7, #8]
 80011a2:	6978      	ldr	r0, [r7, #20]
 80011a4:	f7ff ff90 	bl	80010c8 <NVIC_EncodePriority>
 80011a8:	4602      	mov	r2, r0
 80011aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ae:	4611      	mov	r1, r2
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff ff5f 	bl	8001074 <__NVIC_SetPriority>
}
 80011b6:	bf00      	nop
 80011b8:	3718      	adds	r7, #24
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011be:	b580      	push	{r7, lr}
 80011c0:	b082      	sub	sp, #8
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	4603      	mov	r3, r0
 80011c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff ff35 	bl	800103c <__NVIC_EnableIRQ>
}
 80011d2:	bf00      	nop
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}

080011da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011da:	b580      	push	{r7, lr}
 80011dc:	b082      	sub	sp, #8
 80011de:	af00      	add	r7, sp, #0
 80011e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	f7ff ffa2 	bl	800112c <SysTick_Config>
 80011e8:	4603      	mov	r3, r0
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011f2:	b480      	push	{r7}
 80011f4:	b085      	sub	sp, #20
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011fa:	2300      	movs	r3, #0
 80011fc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001204:	2b02      	cmp	r3, #2
 8001206:	d008      	beq.n	800121a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2204      	movs	r2, #4
 800120c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2200      	movs	r2, #0
 8001212:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e020      	b.n	800125c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f022 020e 	bic.w	r2, r2, #14
 8001228:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f022 0201 	bic.w	r2, r2, #1
 8001238:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001242:	2101      	movs	r1, #1
 8001244:	fa01 f202 	lsl.w	r2, r1, r2
 8001248:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2201      	movs	r2, #1
 800124e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2200      	movs	r2, #0
 8001256:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800125a:	7bfb      	ldrb	r3, [r7, #15]
}
 800125c:	4618      	mov	r0, r3
 800125e:	3714      	adds	r7, #20
 8001260:	46bd      	mov	sp, r7
 8001262:	bc80      	pop	{r7}
 8001264:	4770      	bx	lr
	...

08001268 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001270:	2300      	movs	r3, #0
 8001272:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800127a:	2b02      	cmp	r3, #2
 800127c:	d005      	beq.n	800128a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2204      	movs	r2, #4
 8001282:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001284:	2301      	movs	r3, #1
 8001286:	73fb      	strb	r3, [r7, #15]
 8001288:	e051      	b.n	800132e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f022 020e 	bic.w	r2, r2, #14
 8001298:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f022 0201 	bic.w	r2, r2, #1
 80012a8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a22      	ldr	r2, [pc, #136]	; (8001338 <HAL_DMA_Abort_IT+0xd0>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d029      	beq.n	8001308 <HAL_DMA_Abort_IT+0xa0>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a20      	ldr	r2, [pc, #128]	; (800133c <HAL_DMA_Abort_IT+0xd4>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d022      	beq.n	8001304 <HAL_DMA_Abort_IT+0x9c>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a1f      	ldr	r2, [pc, #124]	; (8001340 <HAL_DMA_Abort_IT+0xd8>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d01a      	beq.n	80012fe <HAL_DMA_Abort_IT+0x96>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a1d      	ldr	r2, [pc, #116]	; (8001344 <HAL_DMA_Abort_IT+0xdc>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d012      	beq.n	80012f8 <HAL_DMA_Abort_IT+0x90>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a1c      	ldr	r2, [pc, #112]	; (8001348 <HAL_DMA_Abort_IT+0xe0>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d00a      	beq.n	80012f2 <HAL_DMA_Abort_IT+0x8a>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a1a      	ldr	r2, [pc, #104]	; (800134c <HAL_DMA_Abort_IT+0xe4>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d102      	bne.n	80012ec <HAL_DMA_Abort_IT+0x84>
 80012e6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80012ea:	e00e      	b.n	800130a <HAL_DMA_Abort_IT+0xa2>
 80012ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80012f0:	e00b      	b.n	800130a <HAL_DMA_Abort_IT+0xa2>
 80012f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012f6:	e008      	b.n	800130a <HAL_DMA_Abort_IT+0xa2>
 80012f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012fc:	e005      	b.n	800130a <HAL_DMA_Abort_IT+0xa2>
 80012fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001302:	e002      	b.n	800130a <HAL_DMA_Abort_IT+0xa2>
 8001304:	2310      	movs	r3, #16
 8001306:	e000      	b.n	800130a <HAL_DMA_Abort_IT+0xa2>
 8001308:	2301      	movs	r3, #1
 800130a:	4a11      	ldr	r2, [pc, #68]	; (8001350 <HAL_DMA_Abort_IT+0xe8>)
 800130c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2201      	movs	r2, #1
 8001312:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2200      	movs	r2, #0
 800131a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001322:	2b00      	cmp	r3, #0
 8001324:	d003      	beq.n	800132e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	4798      	blx	r3
    } 
  }
  return status;
 800132e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001330:	4618      	mov	r0, r3
 8001332:	3710      	adds	r7, #16
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	40020008 	.word	0x40020008
 800133c:	4002001c 	.word	0x4002001c
 8001340:	40020030 	.word	0x40020030
 8001344:	40020044 	.word	0x40020044
 8001348:	40020058 	.word	0x40020058
 800134c:	4002006c 	.word	0x4002006c
 8001350:	40020000 	.word	0x40020000

08001354 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001354:	b480      	push	{r7}
 8001356:	b08b      	sub	sp, #44	; 0x2c
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800135e:	2300      	movs	r3, #0
 8001360:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001362:	2300      	movs	r3, #0
 8001364:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001366:	e148      	b.n	80015fa <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001368:	2201      	movs	r2, #1
 800136a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	69fa      	ldr	r2, [r7, #28]
 8001378:	4013      	ands	r3, r2
 800137a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	429a      	cmp	r2, r3
 8001382:	f040 8137 	bne.w	80015f4 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	4aa3      	ldr	r2, [pc, #652]	; (8001618 <HAL_GPIO_Init+0x2c4>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d05e      	beq.n	800144e <HAL_GPIO_Init+0xfa>
 8001390:	4aa1      	ldr	r2, [pc, #644]	; (8001618 <HAL_GPIO_Init+0x2c4>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d875      	bhi.n	8001482 <HAL_GPIO_Init+0x12e>
 8001396:	4aa1      	ldr	r2, [pc, #644]	; (800161c <HAL_GPIO_Init+0x2c8>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d058      	beq.n	800144e <HAL_GPIO_Init+0xfa>
 800139c:	4a9f      	ldr	r2, [pc, #636]	; (800161c <HAL_GPIO_Init+0x2c8>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d86f      	bhi.n	8001482 <HAL_GPIO_Init+0x12e>
 80013a2:	4a9f      	ldr	r2, [pc, #636]	; (8001620 <HAL_GPIO_Init+0x2cc>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d052      	beq.n	800144e <HAL_GPIO_Init+0xfa>
 80013a8:	4a9d      	ldr	r2, [pc, #628]	; (8001620 <HAL_GPIO_Init+0x2cc>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d869      	bhi.n	8001482 <HAL_GPIO_Init+0x12e>
 80013ae:	4a9d      	ldr	r2, [pc, #628]	; (8001624 <HAL_GPIO_Init+0x2d0>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d04c      	beq.n	800144e <HAL_GPIO_Init+0xfa>
 80013b4:	4a9b      	ldr	r2, [pc, #620]	; (8001624 <HAL_GPIO_Init+0x2d0>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d863      	bhi.n	8001482 <HAL_GPIO_Init+0x12e>
 80013ba:	4a9b      	ldr	r2, [pc, #620]	; (8001628 <HAL_GPIO_Init+0x2d4>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d046      	beq.n	800144e <HAL_GPIO_Init+0xfa>
 80013c0:	4a99      	ldr	r2, [pc, #612]	; (8001628 <HAL_GPIO_Init+0x2d4>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d85d      	bhi.n	8001482 <HAL_GPIO_Init+0x12e>
 80013c6:	2b12      	cmp	r3, #18
 80013c8:	d82a      	bhi.n	8001420 <HAL_GPIO_Init+0xcc>
 80013ca:	2b12      	cmp	r3, #18
 80013cc:	d859      	bhi.n	8001482 <HAL_GPIO_Init+0x12e>
 80013ce:	a201      	add	r2, pc, #4	; (adr r2, 80013d4 <HAL_GPIO_Init+0x80>)
 80013d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013d4:	0800144f 	.word	0x0800144f
 80013d8:	08001429 	.word	0x08001429
 80013dc:	0800143b 	.word	0x0800143b
 80013e0:	0800147d 	.word	0x0800147d
 80013e4:	08001483 	.word	0x08001483
 80013e8:	08001483 	.word	0x08001483
 80013ec:	08001483 	.word	0x08001483
 80013f0:	08001483 	.word	0x08001483
 80013f4:	08001483 	.word	0x08001483
 80013f8:	08001483 	.word	0x08001483
 80013fc:	08001483 	.word	0x08001483
 8001400:	08001483 	.word	0x08001483
 8001404:	08001483 	.word	0x08001483
 8001408:	08001483 	.word	0x08001483
 800140c:	08001483 	.word	0x08001483
 8001410:	08001483 	.word	0x08001483
 8001414:	08001483 	.word	0x08001483
 8001418:	08001431 	.word	0x08001431
 800141c:	08001445 	.word	0x08001445
 8001420:	4a82      	ldr	r2, [pc, #520]	; (800162c <HAL_GPIO_Init+0x2d8>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d013      	beq.n	800144e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001426:	e02c      	b.n	8001482 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	623b      	str	r3, [r7, #32]
          break;
 800142e:	e029      	b.n	8001484 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	3304      	adds	r3, #4
 8001436:	623b      	str	r3, [r7, #32]
          break;
 8001438:	e024      	b.n	8001484 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	68db      	ldr	r3, [r3, #12]
 800143e:	3308      	adds	r3, #8
 8001440:	623b      	str	r3, [r7, #32]
          break;
 8001442:	e01f      	b.n	8001484 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	330c      	adds	r3, #12
 800144a:	623b      	str	r3, [r7, #32]
          break;
 800144c:	e01a      	b.n	8001484 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d102      	bne.n	800145c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001456:	2304      	movs	r3, #4
 8001458:	623b      	str	r3, [r7, #32]
          break;
 800145a:	e013      	b.n	8001484 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	2b01      	cmp	r3, #1
 8001462:	d105      	bne.n	8001470 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001464:	2308      	movs	r3, #8
 8001466:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	69fa      	ldr	r2, [r7, #28]
 800146c:	611a      	str	r2, [r3, #16]
          break;
 800146e:	e009      	b.n	8001484 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001470:	2308      	movs	r3, #8
 8001472:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	69fa      	ldr	r2, [r7, #28]
 8001478:	615a      	str	r2, [r3, #20]
          break;
 800147a:	e003      	b.n	8001484 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800147c:	2300      	movs	r3, #0
 800147e:	623b      	str	r3, [r7, #32]
          break;
 8001480:	e000      	b.n	8001484 <HAL_GPIO_Init+0x130>
          break;
 8001482:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	2bff      	cmp	r3, #255	; 0xff
 8001488:	d801      	bhi.n	800148e <HAL_GPIO_Init+0x13a>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	e001      	b.n	8001492 <HAL_GPIO_Init+0x13e>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	3304      	adds	r3, #4
 8001492:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	2bff      	cmp	r3, #255	; 0xff
 8001498:	d802      	bhi.n	80014a0 <HAL_GPIO_Init+0x14c>
 800149a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	e002      	b.n	80014a6 <HAL_GPIO_Init+0x152>
 80014a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a2:	3b08      	subs	r3, #8
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	210f      	movs	r1, #15
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	fa01 f303 	lsl.w	r3, r1, r3
 80014b4:	43db      	mvns	r3, r3
 80014b6:	401a      	ands	r2, r3
 80014b8:	6a39      	ldr	r1, [r7, #32]
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	fa01 f303 	lsl.w	r3, r1, r3
 80014c0:	431a      	orrs	r2, r3
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	f000 8090 	beq.w	80015f4 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80014d4:	4b56      	ldr	r3, [pc, #344]	; (8001630 <HAL_GPIO_Init+0x2dc>)
 80014d6:	699b      	ldr	r3, [r3, #24]
 80014d8:	4a55      	ldr	r2, [pc, #340]	; (8001630 <HAL_GPIO_Init+0x2dc>)
 80014da:	f043 0301 	orr.w	r3, r3, #1
 80014de:	6193      	str	r3, [r2, #24]
 80014e0:	4b53      	ldr	r3, [pc, #332]	; (8001630 <HAL_GPIO_Init+0x2dc>)
 80014e2:	699b      	ldr	r3, [r3, #24]
 80014e4:	f003 0301 	and.w	r3, r3, #1
 80014e8:	60bb      	str	r3, [r7, #8]
 80014ea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80014ec:	4a51      	ldr	r2, [pc, #324]	; (8001634 <HAL_GPIO_Init+0x2e0>)
 80014ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f0:	089b      	lsrs	r3, r3, #2
 80014f2:	3302      	adds	r3, #2
 80014f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014f8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80014fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fc:	f003 0303 	and.w	r3, r3, #3
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	220f      	movs	r2, #15
 8001504:	fa02 f303 	lsl.w	r3, r2, r3
 8001508:	43db      	mvns	r3, r3
 800150a:	68fa      	ldr	r2, [r7, #12]
 800150c:	4013      	ands	r3, r2
 800150e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	4a49      	ldr	r2, [pc, #292]	; (8001638 <HAL_GPIO_Init+0x2e4>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d00d      	beq.n	8001534 <HAL_GPIO_Init+0x1e0>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	4a48      	ldr	r2, [pc, #288]	; (800163c <HAL_GPIO_Init+0x2e8>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d007      	beq.n	8001530 <HAL_GPIO_Init+0x1dc>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	4a47      	ldr	r2, [pc, #284]	; (8001640 <HAL_GPIO_Init+0x2ec>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d101      	bne.n	800152c <HAL_GPIO_Init+0x1d8>
 8001528:	2302      	movs	r3, #2
 800152a:	e004      	b.n	8001536 <HAL_GPIO_Init+0x1e2>
 800152c:	2303      	movs	r3, #3
 800152e:	e002      	b.n	8001536 <HAL_GPIO_Init+0x1e2>
 8001530:	2301      	movs	r3, #1
 8001532:	e000      	b.n	8001536 <HAL_GPIO_Init+0x1e2>
 8001534:	2300      	movs	r3, #0
 8001536:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001538:	f002 0203 	and.w	r2, r2, #3
 800153c:	0092      	lsls	r2, r2, #2
 800153e:	4093      	lsls	r3, r2
 8001540:	68fa      	ldr	r2, [r7, #12]
 8001542:	4313      	orrs	r3, r2
 8001544:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001546:	493b      	ldr	r1, [pc, #236]	; (8001634 <HAL_GPIO_Init+0x2e0>)
 8001548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154a:	089b      	lsrs	r3, r3, #2
 800154c:	3302      	adds	r3, #2
 800154e:	68fa      	ldr	r2, [r7, #12]
 8001550:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800155c:	2b00      	cmp	r3, #0
 800155e:	d006      	beq.n	800156e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001560:	4b38      	ldr	r3, [pc, #224]	; (8001644 <HAL_GPIO_Init+0x2f0>)
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	4937      	ldr	r1, [pc, #220]	; (8001644 <HAL_GPIO_Init+0x2f0>)
 8001566:	69bb      	ldr	r3, [r7, #24]
 8001568:	4313      	orrs	r3, r2
 800156a:	600b      	str	r3, [r1, #0]
 800156c:	e006      	b.n	800157c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800156e:	4b35      	ldr	r3, [pc, #212]	; (8001644 <HAL_GPIO_Init+0x2f0>)
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	69bb      	ldr	r3, [r7, #24]
 8001574:	43db      	mvns	r3, r3
 8001576:	4933      	ldr	r1, [pc, #204]	; (8001644 <HAL_GPIO_Init+0x2f0>)
 8001578:	4013      	ands	r3, r2
 800157a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001584:	2b00      	cmp	r3, #0
 8001586:	d006      	beq.n	8001596 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001588:	4b2e      	ldr	r3, [pc, #184]	; (8001644 <HAL_GPIO_Init+0x2f0>)
 800158a:	685a      	ldr	r2, [r3, #4]
 800158c:	492d      	ldr	r1, [pc, #180]	; (8001644 <HAL_GPIO_Init+0x2f0>)
 800158e:	69bb      	ldr	r3, [r7, #24]
 8001590:	4313      	orrs	r3, r2
 8001592:	604b      	str	r3, [r1, #4]
 8001594:	e006      	b.n	80015a4 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001596:	4b2b      	ldr	r3, [pc, #172]	; (8001644 <HAL_GPIO_Init+0x2f0>)
 8001598:	685a      	ldr	r2, [r3, #4]
 800159a:	69bb      	ldr	r3, [r7, #24]
 800159c:	43db      	mvns	r3, r3
 800159e:	4929      	ldr	r1, [pc, #164]	; (8001644 <HAL_GPIO_Init+0x2f0>)
 80015a0:	4013      	ands	r3, r2
 80015a2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d006      	beq.n	80015be <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80015b0:	4b24      	ldr	r3, [pc, #144]	; (8001644 <HAL_GPIO_Init+0x2f0>)
 80015b2:	689a      	ldr	r2, [r3, #8]
 80015b4:	4923      	ldr	r1, [pc, #140]	; (8001644 <HAL_GPIO_Init+0x2f0>)
 80015b6:	69bb      	ldr	r3, [r7, #24]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	608b      	str	r3, [r1, #8]
 80015bc:	e006      	b.n	80015cc <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80015be:	4b21      	ldr	r3, [pc, #132]	; (8001644 <HAL_GPIO_Init+0x2f0>)
 80015c0:	689a      	ldr	r2, [r3, #8]
 80015c2:	69bb      	ldr	r3, [r7, #24]
 80015c4:	43db      	mvns	r3, r3
 80015c6:	491f      	ldr	r1, [pc, #124]	; (8001644 <HAL_GPIO_Init+0x2f0>)
 80015c8:	4013      	ands	r3, r2
 80015ca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d006      	beq.n	80015e6 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80015d8:	4b1a      	ldr	r3, [pc, #104]	; (8001644 <HAL_GPIO_Init+0x2f0>)
 80015da:	68da      	ldr	r2, [r3, #12]
 80015dc:	4919      	ldr	r1, [pc, #100]	; (8001644 <HAL_GPIO_Init+0x2f0>)
 80015de:	69bb      	ldr	r3, [r7, #24]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	60cb      	str	r3, [r1, #12]
 80015e4:	e006      	b.n	80015f4 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80015e6:	4b17      	ldr	r3, [pc, #92]	; (8001644 <HAL_GPIO_Init+0x2f0>)
 80015e8:	68da      	ldr	r2, [r3, #12]
 80015ea:	69bb      	ldr	r3, [r7, #24]
 80015ec:	43db      	mvns	r3, r3
 80015ee:	4915      	ldr	r1, [pc, #84]	; (8001644 <HAL_GPIO_Init+0x2f0>)
 80015f0:	4013      	ands	r3, r2
 80015f2:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80015f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f6:	3301      	adds	r3, #1
 80015f8:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001600:	fa22 f303 	lsr.w	r3, r2, r3
 8001604:	2b00      	cmp	r3, #0
 8001606:	f47f aeaf 	bne.w	8001368 <HAL_GPIO_Init+0x14>
  }
}
 800160a:	bf00      	nop
 800160c:	bf00      	nop
 800160e:	372c      	adds	r7, #44	; 0x2c
 8001610:	46bd      	mov	sp, r7
 8001612:	bc80      	pop	{r7}
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	10320000 	.word	0x10320000
 800161c:	10310000 	.word	0x10310000
 8001620:	10220000 	.word	0x10220000
 8001624:	10210000 	.word	0x10210000
 8001628:	10120000 	.word	0x10120000
 800162c:	10110000 	.word	0x10110000
 8001630:	40021000 	.word	0x40021000
 8001634:	40010000 	.word	0x40010000
 8001638:	40010800 	.word	0x40010800
 800163c:	40010c00 	.word	0x40010c00
 8001640:	40011000 	.word	0x40011000
 8001644:	40010400 	.word	0x40010400

08001648 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001648:	b480      	push	{r7}
 800164a:	b085      	sub	sp, #20
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	460b      	mov	r3, r1
 8001652:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	689a      	ldr	r2, [r3, #8]
 8001658:	887b      	ldrh	r3, [r7, #2]
 800165a:	4013      	ands	r3, r2
 800165c:	2b00      	cmp	r3, #0
 800165e:	d002      	beq.n	8001666 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001660:	2301      	movs	r3, #1
 8001662:	73fb      	strb	r3, [r7, #15]
 8001664:	e001      	b.n	800166a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001666:	2300      	movs	r3, #0
 8001668:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800166a:	7bfb      	ldrb	r3, [r7, #15]
}
 800166c:	4618      	mov	r0, r3
 800166e:	3714      	adds	r7, #20
 8001670:	46bd      	mov	sp, r7
 8001672:	bc80      	pop	{r7}
 8001674:	4770      	bx	lr

08001676 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001676:	b480      	push	{r7}
 8001678:	b083      	sub	sp, #12
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
 800167e:	460b      	mov	r3, r1
 8001680:	807b      	strh	r3, [r7, #2]
 8001682:	4613      	mov	r3, r2
 8001684:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001686:	787b      	ldrb	r3, [r7, #1]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d003      	beq.n	8001694 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800168c:	887a      	ldrh	r2, [r7, #2]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001692:	e003      	b.n	800169c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001694:	887b      	ldrh	r3, [r7, #2]
 8001696:	041a      	lsls	r2, r3, #16
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	611a      	str	r2, [r3, #16]
}
 800169c:	bf00      	nop
 800169e:	370c      	adds	r7, #12
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bc80      	pop	{r7}
 80016a4:	4770      	bx	lr
	...

080016a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b086      	sub	sp, #24
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d101      	bne.n	80016ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e26c      	b.n	8001b94 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	f000 8087 	beq.w	80017d6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016c8:	4b92      	ldr	r3, [pc, #584]	; (8001914 <HAL_RCC_OscConfig+0x26c>)
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f003 030c 	and.w	r3, r3, #12
 80016d0:	2b04      	cmp	r3, #4
 80016d2:	d00c      	beq.n	80016ee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016d4:	4b8f      	ldr	r3, [pc, #572]	; (8001914 <HAL_RCC_OscConfig+0x26c>)
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f003 030c 	and.w	r3, r3, #12
 80016dc:	2b08      	cmp	r3, #8
 80016de:	d112      	bne.n	8001706 <HAL_RCC_OscConfig+0x5e>
 80016e0:	4b8c      	ldr	r3, [pc, #560]	; (8001914 <HAL_RCC_OscConfig+0x26c>)
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016ec:	d10b      	bne.n	8001706 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016ee:	4b89      	ldr	r3, [pc, #548]	; (8001914 <HAL_RCC_OscConfig+0x26c>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d06c      	beq.n	80017d4 <HAL_RCC_OscConfig+0x12c>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d168      	bne.n	80017d4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e246      	b.n	8001b94 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800170e:	d106      	bne.n	800171e <HAL_RCC_OscConfig+0x76>
 8001710:	4b80      	ldr	r3, [pc, #512]	; (8001914 <HAL_RCC_OscConfig+0x26c>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a7f      	ldr	r2, [pc, #508]	; (8001914 <HAL_RCC_OscConfig+0x26c>)
 8001716:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800171a:	6013      	str	r3, [r2, #0]
 800171c:	e02e      	b.n	800177c <HAL_RCC_OscConfig+0xd4>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d10c      	bne.n	8001740 <HAL_RCC_OscConfig+0x98>
 8001726:	4b7b      	ldr	r3, [pc, #492]	; (8001914 <HAL_RCC_OscConfig+0x26c>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a7a      	ldr	r2, [pc, #488]	; (8001914 <HAL_RCC_OscConfig+0x26c>)
 800172c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001730:	6013      	str	r3, [r2, #0]
 8001732:	4b78      	ldr	r3, [pc, #480]	; (8001914 <HAL_RCC_OscConfig+0x26c>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a77      	ldr	r2, [pc, #476]	; (8001914 <HAL_RCC_OscConfig+0x26c>)
 8001738:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800173c:	6013      	str	r3, [r2, #0]
 800173e:	e01d      	b.n	800177c <HAL_RCC_OscConfig+0xd4>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001748:	d10c      	bne.n	8001764 <HAL_RCC_OscConfig+0xbc>
 800174a:	4b72      	ldr	r3, [pc, #456]	; (8001914 <HAL_RCC_OscConfig+0x26c>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a71      	ldr	r2, [pc, #452]	; (8001914 <HAL_RCC_OscConfig+0x26c>)
 8001750:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001754:	6013      	str	r3, [r2, #0]
 8001756:	4b6f      	ldr	r3, [pc, #444]	; (8001914 <HAL_RCC_OscConfig+0x26c>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a6e      	ldr	r2, [pc, #440]	; (8001914 <HAL_RCC_OscConfig+0x26c>)
 800175c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001760:	6013      	str	r3, [r2, #0]
 8001762:	e00b      	b.n	800177c <HAL_RCC_OscConfig+0xd4>
 8001764:	4b6b      	ldr	r3, [pc, #428]	; (8001914 <HAL_RCC_OscConfig+0x26c>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a6a      	ldr	r2, [pc, #424]	; (8001914 <HAL_RCC_OscConfig+0x26c>)
 800176a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800176e:	6013      	str	r3, [r2, #0]
 8001770:	4b68      	ldr	r3, [pc, #416]	; (8001914 <HAL_RCC_OscConfig+0x26c>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a67      	ldr	r2, [pc, #412]	; (8001914 <HAL_RCC_OscConfig+0x26c>)
 8001776:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800177a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d013      	beq.n	80017ac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001784:	f7ff fc1e 	bl	8000fc4 <HAL_GetTick>
 8001788:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800178a:	e008      	b.n	800179e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800178c:	f7ff fc1a 	bl	8000fc4 <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	2b64      	cmp	r3, #100	; 0x64
 8001798:	d901      	bls.n	800179e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e1fa      	b.n	8001b94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800179e:	4b5d      	ldr	r3, [pc, #372]	; (8001914 <HAL_RCC_OscConfig+0x26c>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d0f0      	beq.n	800178c <HAL_RCC_OscConfig+0xe4>
 80017aa:	e014      	b.n	80017d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ac:	f7ff fc0a 	bl	8000fc4 <HAL_GetTick>
 80017b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017b2:	e008      	b.n	80017c6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017b4:	f7ff fc06 	bl	8000fc4 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	2b64      	cmp	r3, #100	; 0x64
 80017c0:	d901      	bls.n	80017c6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e1e6      	b.n	8001b94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017c6:	4b53      	ldr	r3, [pc, #332]	; (8001914 <HAL_RCC_OscConfig+0x26c>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d1f0      	bne.n	80017b4 <HAL_RCC_OscConfig+0x10c>
 80017d2:	e000      	b.n	80017d6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0302 	and.w	r3, r3, #2
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d063      	beq.n	80018aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017e2:	4b4c      	ldr	r3, [pc, #304]	; (8001914 <HAL_RCC_OscConfig+0x26c>)
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f003 030c 	and.w	r3, r3, #12
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d00b      	beq.n	8001806 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80017ee:	4b49      	ldr	r3, [pc, #292]	; (8001914 <HAL_RCC_OscConfig+0x26c>)
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f003 030c 	and.w	r3, r3, #12
 80017f6:	2b08      	cmp	r3, #8
 80017f8:	d11c      	bne.n	8001834 <HAL_RCC_OscConfig+0x18c>
 80017fa:	4b46      	ldr	r3, [pc, #280]	; (8001914 <HAL_RCC_OscConfig+0x26c>)
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d116      	bne.n	8001834 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001806:	4b43      	ldr	r3, [pc, #268]	; (8001914 <HAL_RCC_OscConfig+0x26c>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0302 	and.w	r3, r3, #2
 800180e:	2b00      	cmp	r3, #0
 8001810:	d005      	beq.n	800181e <HAL_RCC_OscConfig+0x176>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	691b      	ldr	r3, [r3, #16]
 8001816:	2b01      	cmp	r3, #1
 8001818:	d001      	beq.n	800181e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e1ba      	b.n	8001b94 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800181e:	4b3d      	ldr	r3, [pc, #244]	; (8001914 <HAL_RCC_OscConfig+0x26c>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	695b      	ldr	r3, [r3, #20]
 800182a:	00db      	lsls	r3, r3, #3
 800182c:	4939      	ldr	r1, [pc, #228]	; (8001914 <HAL_RCC_OscConfig+0x26c>)
 800182e:	4313      	orrs	r3, r2
 8001830:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001832:	e03a      	b.n	80018aa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	691b      	ldr	r3, [r3, #16]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d020      	beq.n	800187e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800183c:	4b36      	ldr	r3, [pc, #216]	; (8001918 <HAL_RCC_OscConfig+0x270>)
 800183e:	2201      	movs	r2, #1
 8001840:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001842:	f7ff fbbf 	bl	8000fc4 <HAL_GetTick>
 8001846:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001848:	e008      	b.n	800185c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800184a:	f7ff fbbb 	bl	8000fc4 <HAL_GetTick>
 800184e:	4602      	mov	r2, r0
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	2b02      	cmp	r3, #2
 8001856:	d901      	bls.n	800185c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001858:	2303      	movs	r3, #3
 800185a:	e19b      	b.n	8001b94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800185c:	4b2d      	ldr	r3, [pc, #180]	; (8001914 <HAL_RCC_OscConfig+0x26c>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 0302 	and.w	r3, r3, #2
 8001864:	2b00      	cmp	r3, #0
 8001866:	d0f0      	beq.n	800184a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001868:	4b2a      	ldr	r3, [pc, #168]	; (8001914 <HAL_RCC_OscConfig+0x26c>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	695b      	ldr	r3, [r3, #20]
 8001874:	00db      	lsls	r3, r3, #3
 8001876:	4927      	ldr	r1, [pc, #156]	; (8001914 <HAL_RCC_OscConfig+0x26c>)
 8001878:	4313      	orrs	r3, r2
 800187a:	600b      	str	r3, [r1, #0]
 800187c:	e015      	b.n	80018aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800187e:	4b26      	ldr	r3, [pc, #152]	; (8001918 <HAL_RCC_OscConfig+0x270>)
 8001880:	2200      	movs	r2, #0
 8001882:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001884:	f7ff fb9e 	bl	8000fc4 <HAL_GetTick>
 8001888:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800188a:	e008      	b.n	800189e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800188c:	f7ff fb9a 	bl	8000fc4 <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	2b02      	cmp	r3, #2
 8001898:	d901      	bls.n	800189e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e17a      	b.n	8001b94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800189e:	4b1d      	ldr	r3, [pc, #116]	; (8001914 <HAL_RCC_OscConfig+0x26c>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0302 	and.w	r3, r3, #2
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d1f0      	bne.n	800188c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0308 	and.w	r3, r3, #8
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d03a      	beq.n	800192c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	699b      	ldr	r3, [r3, #24]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d019      	beq.n	80018f2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018be:	4b17      	ldr	r3, [pc, #92]	; (800191c <HAL_RCC_OscConfig+0x274>)
 80018c0:	2201      	movs	r2, #1
 80018c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018c4:	f7ff fb7e 	bl	8000fc4 <HAL_GetTick>
 80018c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018ca:	e008      	b.n	80018de <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018cc:	f7ff fb7a 	bl	8000fc4 <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d901      	bls.n	80018de <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e15a      	b.n	8001b94 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018de:	4b0d      	ldr	r3, [pc, #52]	; (8001914 <HAL_RCC_OscConfig+0x26c>)
 80018e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e2:	f003 0302 	and.w	r3, r3, #2
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d0f0      	beq.n	80018cc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80018ea:	2001      	movs	r0, #1
 80018ec:	f000 fad8 	bl	8001ea0 <RCC_Delay>
 80018f0:	e01c      	b.n	800192c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018f2:	4b0a      	ldr	r3, [pc, #40]	; (800191c <HAL_RCC_OscConfig+0x274>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018f8:	f7ff fb64 	bl	8000fc4 <HAL_GetTick>
 80018fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018fe:	e00f      	b.n	8001920 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001900:	f7ff fb60 	bl	8000fc4 <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b02      	cmp	r3, #2
 800190c:	d908      	bls.n	8001920 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e140      	b.n	8001b94 <HAL_RCC_OscConfig+0x4ec>
 8001912:	bf00      	nop
 8001914:	40021000 	.word	0x40021000
 8001918:	42420000 	.word	0x42420000
 800191c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001920:	4b9e      	ldr	r3, [pc, #632]	; (8001b9c <HAL_RCC_OscConfig+0x4f4>)
 8001922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001924:	f003 0302 	and.w	r3, r3, #2
 8001928:	2b00      	cmp	r3, #0
 800192a:	d1e9      	bne.n	8001900 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0304 	and.w	r3, r3, #4
 8001934:	2b00      	cmp	r3, #0
 8001936:	f000 80a6 	beq.w	8001a86 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800193a:	2300      	movs	r3, #0
 800193c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800193e:	4b97      	ldr	r3, [pc, #604]	; (8001b9c <HAL_RCC_OscConfig+0x4f4>)
 8001940:	69db      	ldr	r3, [r3, #28]
 8001942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d10d      	bne.n	8001966 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800194a:	4b94      	ldr	r3, [pc, #592]	; (8001b9c <HAL_RCC_OscConfig+0x4f4>)
 800194c:	69db      	ldr	r3, [r3, #28]
 800194e:	4a93      	ldr	r2, [pc, #588]	; (8001b9c <HAL_RCC_OscConfig+0x4f4>)
 8001950:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001954:	61d3      	str	r3, [r2, #28]
 8001956:	4b91      	ldr	r3, [pc, #580]	; (8001b9c <HAL_RCC_OscConfig+0x4f4>)
 8001958:	69db      	ldr	r3, [r3, #28]
 800195a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800195e:	60bb      	str	r3, [r7, #8]
 8001960:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001962:	2301      	movs	r3, #1
 8001964:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001966:	4b8e      	ldr	r3, [pc, #568]	; (8001ba0 <HAL_RCC_OscConfig+0x4f8>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800196e:	2b00      	cmp	r3, #0
 8001970:	d118      	bne.n	80019a4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001972:	4b8b      	ldr	r3, [pc, #556]	; (8001ba0 <HAL_RCC_OscConfig+0x4f8>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a8a      	ldr	r2, [pc, #552]	; (8001ba0 <HAL_RCC_OscConfig+0x4f8>)
 8001978:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800197c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800197e:	f7ff fb21 	bl	8000fc4 <HAL_GetTick>
 8001982:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001984:	e008      	b.n	8001998 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001986:	f7ff fb1d 	bl	8000fc4 <HAL_GetTick>
 800198a:	4602      	mov	r2, r0
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	2b64      	cmp	r3, #100	; 0x64
 8001992:	d901      	bls.n	8001998 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001994:	2303      	movs	r3, #3
 8001996:	e0fd      	b.n	8001b94 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001998:	4b81      	ldr	r3, [pc, #516]	; (8001ba0 <HAL_RCC_OscConfig+0x4f8>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d0f0      	beq.n	8001986 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d106      	bne.n	80019ba <HAL_RCC_OscConfig+0x312>
 80019ac:	4b7b      	ldr	r3, [pc, #492]	; (8001b9c <HAL_RCC_OscConfig+0x4f4>)
 80019ae:	6a1b      	ldr	r3, [r3, #32]
 80019b0:	4a7a      	ldr	r2, [pc, #488]	; (8001b9c <HAL_RCC_OscConfig+0x4f4>)
 80019b2:	f043 0301 	orr.w	r3, r3, #1
 80019b6:	6213      	str	r3, [r2, #32]
 80019b8:	e02d      	b.n	8001a16 <HAL_RCC_OscConfig+0x36e>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	68db      	ldr	r3, [r3, #12]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d10c      	bne.n	80019dc <HAL_RCC_OscConfig+0x334>
 80019c2:	4b76      	ldr	r3, [pc, #472]	; (8001b9c <HAL_RCC_OscConfig+0x4f4>)
 80019c4:	6a1b      	ldr	r3, [r3, #32]
 80019c6:	4a75      	ldr	r2, [pc, #468]	; (8001b9c <HAL_RCC_OscConfig+0x4f4>)
 80019c8:	f023 0301 	bic.w	r3, r3, #1
 80019cc:	6213      	str	r3, [r2, #32]
 80019ce:	4b73      	ldr	r3, [pc, #460]	; (8001b9c <HAL_RCC_OscConfig+0x4f4>)
 80019d0:	6a1b      	ldr	r3, [r3, #32]
 80019d2:	4a72      	ldr	r2, [pc, #456]	; (8001b9c <HAL_RCC_OscConfig+0x4f4>)
 80019d4:	f023 0304 	bic.w	r3, r3, #4
 80019d8:	6213      	str	r3, [r2, #32]
 80019da:	e01c      	b.n	8001a16 <HAL_RCC_OscConfig+0x36e>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	2b05      	cmp	r3, #5
 80019e2:	d10c      	bne.n	80019fe <HAL_RCC_OscConfig+0x356>
 80019e4:	4b6d      	ldr	r3, [pc, #436]	; (8001b9c <HAL_RCC_OscConfig+0x4f4>)
 80019e6:	6a1b      	ldr	r3, [r3, #32]
 80019e8:	4a6c      	ldr	r2, [pc, #432]	; (8001b9c <HAL_RCC_OscConfig+0x4f4>)
 80019ea:	f043 0304 	orr.w	r3, r3, #4
 80019ee:	6213      	str	r3, [r2, #32]
 80019f0:	4b6a      	ldr	r3, [pc, #424]	; (8001b9c <HAL_RCC_OscConfig+0x4f4>)
 80019f2:	6a1b      	ldr	r3, [r3, #32]
 80019f4:	4a69      	ldr	r2, [pc, #420]	; (8001b9c <HAL_RCC_OscConfig+0x4f4>)
 80019f6:	f043 0301 	orr.w	r3, r3, #1
 80019fa:	6213      	str	r3, [r2, #32]
 80019fc:	e00b      	b.n	8001a16 <HAL_RCC_OscConfig+0x36e>
 80019fe:	4b67      	ldr	r3, [pc, #412]	; (8001b9c <HAL_RCC_OscConfig+0x4f4>)
 8001a00:	6a1b      	ldr	r3, [r3, #32]
 8001a02:	4a66      	ldr	r2, [pc, #408]	; (8001b9c <HAL_RCC_OscConfig+0x4f4>)
 8001a04:	f023 0301 	bic.w	r3, r3, #1
 8001a08:	6213      	str	r3, [r2, #32]
 8001a0a:	4b64      	ldr	r3, [pc, #400]	; (8001b9c <HAL_RCC_OscConfig+0x4f4>)
 8001a0c:	6a1b      	ldr	r3, [r3, #32]
 8001a0e:	4a63      	ldr	r2, [pc, #396]	; (8001b9c <HAL_RCC_OscConfig+0x4f4>)
 8001a10:	f023 0304 	bic.w	r3, r3, #4
 8001a14:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d015      	beq.n	8001a4a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a1e:	f7ff fad1 	bl	8000fc4 <HAL_GetTick>
 8001a22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a24:	e00a      	b.n	8001a3c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a26:	f7ff facd 	bl	8000fc4 <HAL_GetTick>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d901      	bls.n	8001a3c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	e0ab      	b.n	8001b94 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a3c:	4b57      	ldr	r3, [pc, #348]	; (8001b9c <HAL_RCC_OscConfig+0x4f4>)
 8001a3e:	6a1b      	ldr	r3, [r3, #32]
 8001a40:	f003 0302 	and.w	r3, r3, #2
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d0ee      	beq.n	8001a26 <HAL_RCC_OscConfig+0x37e>
 8001a48:	e014      	b.n	8001a74 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a4a:	f7ff fabb 	bl	8000fc4 <HAL_GetTick>
 8001a4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a50:	e00a      	b.n	8001a68 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a52:	f7ff fab7 	bl	8000fc4 <HAL_GetTick>
 8001a56:	4602      	mov	r2, r0
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d901      	bls.n	8001a68 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a64:	2303      	movs	r3, #3
 8001a66:	e095      	b.n	8001b94 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a68:	4b4c      	ldr	r3, [pc, #304]	; (8001b9c <HAL_RCC_OscConfig+0x4f4>)
 8001a6a:	6a1b      	ldr	r3, [r3, #32]
 8001a6c:	f003 0302 	and.w	r3, r3, #2
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d1ee      	bne.n	8001a52 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a74:	7dfb      	ldrb	r3, [r7, #23]
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d105      	bne.n	8001a86 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a7a:	4b48      	ldr	r3, [pc, #288]	; (8001b9c <HAL_RCC_OscConfig+0x4f4>)
 8001a7c:	69db      	ldr	r3, [r3, #28]
 8001a7e:	4a47      	ldr	r2, [pc, #284]	; (8001b9c <HAL_RCC_OscConfig+0x4f4>)
 8001a80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a84:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	69db      	ldr	r3, [r3, #28]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	f000 8081 	beq.w	8001b92 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a90:	4b42      	ldr	r3, [pc, #264]	; (8001b9c <HAL_RCC_OscConfig+0x4f4>)
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f003 030c 	and.w	r3, r3, #12
 8001a98:	2b08      	cmp	r3, #8
 8001a9a:	d061      	beq.n	8001b60 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	69db      	ldr	r3, [r3, #28]
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d146      	bne.n	8001b32 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aa4:	4b3f      	ldr	r3, [pc, #252]	; (8001ba4 <HAL_RCC_OscConfig+0x4fc>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aaa:	f7ff fa8b 	bl	8000fc4 <HAL_GetTick>
 8001aae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ab0:	e008      	b.n	8001ac4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ab2:	f7ff fa87 	bl	8000fc4 <HAL_GetTick>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	d901      	bls.n	8001ac4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	e067      	b.n	8001b94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ac4:	4b35      	ldr	r3, [pc, #212]	; (8001b9c <HAL_RCC_OscConfig+0x4f4>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d1f0      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6a1b      	ldr	r3, [r3, #32]
 8001ad4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ad8:	d108      	bne.n	8001aec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ada:	4b30      	ldr	r3, [pc, #192]	; (8001b9c <HAL_RCC_OscConfig+0x4f4>)
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	492d      	ldr	r1, [pc, #180]	; (8001b9c <HAL_RCC_OscConfig+0x4f4>)
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001aec:	4b2b      	ldr	r3, [pc, #172]	; (8001b9c <HAL_RCC_OscConfig+0x4f4>)
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6a19      	ldr	r1, [r3, #32]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001afc:	430b      	orrs	r3, r1
 8001afe:	4927      	ldr	r1, [pc, #156]	; (8001b9c <HAL_RCC_OscConfig+0x4f4>)
 8001b00:	4313      	orrs	r3, r2
 8001b02:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b04:	4b27      	ldr	r3, [pc, #156]	; (8001ba4 <HAL_RCC_OscConfig+0x4fc>)
 8001b06:	2201      	movs	r2, #1
 8001b08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b0a:	f7ff fa5b 	bl	8000fc4 <HAL_GetTick>
 8001b0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b10:	e008      	b.n	8001b24 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b12:	f7ff fa57 	bl	8000fc4 <HAL_GetTick>
 8001b16:	4602      	mov	r2, r0
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d901      	bls.n	8001b24 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b20:	2303      	movs	r3, #3
 8001b22:	e037      	b.n	8001b94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b24:	4b1d      	ldr	r3, [pc, #116]	; (8001b9c <HAL_RCC_OscConfig+0x4f4>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d0f0      	beq.n	8001b12 <HAL_RCC_OscConfig+0x46a>
 8001b30:	e02f      	b.n	8001b92 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b32:	4b1c      	ldr	r3, [pc, #112]	; (8001ba4 <HAL_RCC_OscConfig+0x4fc>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b38:	f7ff fa44 	bl	8000fc4 <HAL_GetTick>
 8001b3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b3e:	e008      	b.n	8001b52 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b40:	f7ff fa40 	bl	8000fc4 <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d901      	bls.n	8001b52 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e020      	b.n	8001b94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b52:	4b12      	ldr	r3, [pc, #72]	; (8001b9c <HAL_RCC_OscConfig+0x4f4>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d1f0      	bne.n	8001b40 <HAL_RCC_OscConfig+0x498>
 8001b5e:	e018      	b.n	8001b92 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	69db      	ldr	r3, [r3, #28]
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d101      	bne.n	8001b6c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e013      	b.n	8001b94 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b6c:	4b0b      	ldr	r3, [pc, #44]	; (8001b9c <HAL_RCC_OscConfig+0x4f4>)
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6a1b      	ldr	r3, [r3, #32]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d106      	bne.n	8001b8e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d001      	beq.n	8001b92 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e000      	b.n	8001b94 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001b92:	2300      	movs	r3, #0
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3718      	adds	r7, #24
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	40021000 	.word	0x40021000
 8001ba0:	40007000 	.word	0x40007000
 8001ba4:	42420060 	.word	0x42420060

08001ba8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d101      	bne.n	8001bbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e0d0      	b.n	8001d5e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001bbc:	4b6a      	ldr	r3, [pc, #424]	; (8001d68 <HAL_RCC_ClockConfig+0x1c0>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0307 	and.w	r3, r3, #7
 8001bc4:	683a      	ldr	r2, [r7, #0]
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d910      	bls.n	8001bec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bca:	4b67      	ldr	r3, [pc, #412]	; (8001d68 <HAL_RCC_ClockConfig+0x1c0>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f023 0207 	bic.w	r2, r3, #7
 8001bd2:	4965      	ldr	r1, [pc, #404]	; (8001d68 <HAL_RCC_ClockConfig+0x1c0>)
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bda:	4b63      	ldr	r3, [pc, #396]	; (8001d68 <HAL_RCC_ClockConfig+0x1c0>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0307 	and.w	r3, r3, #7
 8001be2:	683a      	ldr	r2, [r7, #0]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d001      	beq.n	8001bec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e0b8      	b.n	8001d5e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0302 	and.w	r3, r3, #2
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d020      	beq.n	8001c3a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0304 	and.w	r3, r3, #4
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d005      	beq.n	8001c10 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c04:	4b59      	ldr	r3, [pc, #356]	; (8001d6c <HAL_RCC_ClockConfig+0x1c4>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	4a58      	ldr	r2, [pc, #352]	; (8001d6c <HAL_RCC_ClockConfig+0x1c4>)
 8001c0a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c0e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0308 	and.w	r3, r3, #8
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d005      	beq.n	8001c28 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c1c:	4b53      	ldr	r3, [pc, #332]	; (8001d6c <HAL_RCC_ClockConfig+0x1c4>)
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	4a52      	ldr	r2, [pc, #328]	; (8001d6c <HAL_RCC_ClockConfig+0x1c4>)
 8001c22:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001c26:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c28:	4b50      	ldr	r3, [pc, #320]	; (8001d6c <HAL_RCC_ClockConfig+0x1c4>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	494d      	ldr	r1, [pc, #308]	; (8001d6c <HAL_RCC_ClockConfig+0x1c4>)
 8001c36:	4313      	orrs	r3, r2
 8001c38:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0301 	and.w	r3, r3, #1
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d040      	beq.n	8001cc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d107      	bne.n	8001c5e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c4e:	4b47      	ldr	r3, [pc, #284]	; (8001d6c <HAL_RCC_ClockConfig+0x1c4>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d115      	bne.n	8001c86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e07f      	b.n	8001d5e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d107      	bne.n	8001c76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c66:	4b41      	ldr	r3, [pc, #260]	; (8001d6c <HAL_RCC_ClockConfig+0x1c4>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d109      	bne.n	8001c86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e073      	b.n	8001d5e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c76:	4b3d      	ldr	r3, [pc, #244]	; (8001d6c <HAL_RCC_ClockConfig+0x1c4>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0302 	and.w	r3, r3, #2
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d101      	bne.n	8001c86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e06b      	b.n	8001d5e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c86:	4b39      	ldr	r3, [pc, #228]	; (8001d6c <HAL_RCC_ClockConfig+0x1c4>)
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f023 0203 	bic.w	r2, r3, #3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	4936      	ldr	r1, [pc, #216]	; (8001d6c <HAL_RCC_ClockConfig+0x1c4>)
 8001c94:	4313      	orrs	r3, r2
 8001c96:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c98:	f7ff f994 	bl	8000fc4 <HAL_GetTick>
 8001c9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c9e:	e00a      	b.n	8001cb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ca0:	f7ff f990 	bl	8000fc4 <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d901      	bls.n	8001cb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e053      	b.n	8001d5e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cb6:	4b2d      	ldr	r3, [pc, #180]	; (8001d6c <HAL_RCC_ClockConfig+0x1c4>)
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f003 020c 	and.w	r2, r3, #12
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d1eb      	bne.n	8001ca0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001cc8:	4b27      	ldr	r3, [pc, #156]	; (8001d68 <HAL_RCC_ClockConfig+0x1c0>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0307 	and.w	r3, r3, #7
 8001cd0:	683a      	ldr	r2, [r7, #0]
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d210      	bcs.n	8001cf8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cd6:	4b24      	ldr	r3, [pc, #144]	; (8001d68 <HAL_RCC_ClockConfig+0x1c0>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f023 0207 	bic.w	r2, r3, #7
 8001cde:	4922      	ldr	r1, [pc, #136]	; (8001d68 <HAL_RCC_ClockConfig+0x1c0>)
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ce6:	4b20      	ldr	r3, [pc, #128]	; (8001d68 <HAL_RCC_ClockConfig+0x1c0>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0307 	and.w	r3, r3, #7
 8001cee:	683a      	ldr	r2, [r7, #0]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d001      	beq.n	8001cf8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e032      	b.n	8001d5e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0304 	and.w	r3, r3, #4
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d008      	beq.n	8001d16 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d04:	4b19      	ldr	r3, [pc, #100]	; (8001d6c <HAL_RCC_ClockConfig+0x1c4>)
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	4916      	ldr	r1, [pc, #88]	; (8001d6c <HAL_RCC_ClockConfig+0x1c4>)
 8001d12:	4313      	orrs	r3, r2
 8001d14:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0308 	and.w	r3, r3, #8
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d009      	beq.n	8001d36 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d22:	4b12      	ldr	r3, [pc, #72]	; (8001d6c <HAL_RCC_ClockConfig+0x1c4>)
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	691b      	ldr	r3, [r3, #16]
 8001d2e:	00db      	lsls	r3, r3, #3
 8001d30:	490e      	ldr	r1, [pc, #56]	; (8001d6c <HAL_RCC_ClockConfig+0x1c4>)
 8001d32:	4313      	orrs	r3, r2
 8001d34:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d36:	f000 f821 	bl	8001d7c <HAL_RCC_GetSysClockFreq>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	4b0b      	ldr	r3, [pc, #44]	; (8001d6c <HAL_RCC_ClockConfig+0x1c4>)
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	091b      	lsrs	r3, r3, #4
 8001d42:	f003 030f 	and.w	r3, r3, #15
 8001d46:	490a      	ldr	r1, [pc, #40]	; (8001d70 <HAL_RCC_ClockConfig+0x1c8>)
 8001d48:	5ccb      	ldrb	r3, [r1, r3]
 8001d4a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d4e:	4a09      	ldr	r2, [pc, #36]	; (8001d74 <HAL_RCC_ClockConfig+0x1cc>)
 8001d50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d52:	4b09      	ldr	r3, [pc, #36]	; (8001d78 <HAL_RCC_ClockConfig+0x1d0>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7ff f8f2 	bl	8000f40 <HAL_InitTick>

  return HAL_OK;
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3710      	adds	r7, #16
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	40022000 	.word	0x40022000
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	08002f1c 	.word	0x08002f1c
 8001d74:	20000068 	.word	0x20000068
 8001d78:	2000006c 	.word	0x2000006c

08001d7c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d7c:	b490      	push	{r4, r7}
 8001d7e:	b08a      	sub	sp, #40	; 0x28
 8001d80:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001d82:	4b2a      	ldr	r3, [pc, #168]	; (8001e2c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001d84:	1d3c      	adds	r4, r7, #4
 8001d86:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d88:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001d8c:	f240 2301 	movw	r3, #513	; 0x201
 8001d90:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d92:	2300      	movs	r3, #0
 8001d94:	61fb      	str	r3, [r7, #28]
 8001d96:	2300      	movs	r3, #0
 8001d98:	61bb      	str	r3, [r7, #24]
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	627b      	str	r3, [r7, #36]	; 0x24
 8001d9e:	2300      	movs	r3, #0
 8001da0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001da2:	2300      	movs	r3, #0
 8001da4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001da6:	4b22      	ldr	r3, [pc, #136]	; (8001e30 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	f003 030c 	and.w	r3, r3, #12
 8001db2:	2b04      	cmp	r3, #4
 8001db4:	d002      	beq.n	8001dbc <HAL_RCC_GetSysClockFreq+0x40>
 8001db6:	2b08      	cmp	r3, #8
 8001db8:	d003      	beq.n	8001dc2 <HAL_RCC_GetSysClockFreq+0x46>
 8001dba:	e02d      	b.n	8001e18 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001dbc:	4b1d      	ldr	r3, [pc, #116]	; (8001e34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dbe:	623b      	str	r3, [r7, #32]
      break;
 8001dc0:	e02d      	b.n	8001e1e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	0c9b      	lsrs	r3, r3, #18
 8001dc6:	f003 030f 	and.w	r3, r3, #15
 8001dca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001dce:	4413      	add	r3, r2
 8001dd0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001dd4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d013      	beq.n	8001e08 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001de0:	4b13      	ldr	r3, [pc, #76]	; (8001e30 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	0c5b      	lsrs	r3, r3, #17
 8001de6:	f003 0301 	and.w	r3, r3, #1
 8001dea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001dee:	4413      	add	r3, r2
 8001df0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001df4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	4a0e      	ldr	r2, [pc, #56]	; (8001e34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dfa:	fb02 f203 	mul.w	r2, r2, r3
 8001dfe:	69bb      	ldr	r3, [r7, #24]
 8001e00:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e04:	627b      	str	r3, [r7, #36]	; 0x24
 8001e06:	e004      	b.n	8001e12 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	4a0b      	ldr	r2, [pc, #44]	; (8001e38 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e0c:	fb02 f303 	mul.w	r3, r2, r3
 8001e10:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e14:	623b      	str	r3, [r7, #32]
      break;
 8001e16:	e002      	b.n	8001e1e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e18:	4b06      	ldr	r3, [pc, #24]	; (8001e34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e1a:	623b      	str	r3, [r7, #32]
      break;
 8001e1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e1e:	6a3b      	ldr	r3, [r7, #32]
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3728      	adds	r7, #40	; 0x28
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bc90      	pop	{r4, r7}
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	08002f0c 	.word	0x08002f0c
 8001e30:	40021000 	.word	0x40021000
 8001e34:	007a1200 	.word	0x007a1200
 8001e38:	003d0900 	.word	0x003d0900

08001e3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e40:	4b02      	ldr	r3, [pc, #8]	; (8001e4c <HAL_RCC_GetHCLKFreq+0x10>)
 8001e42:	681b      	ldr	r3, [r3, #0]
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bc80      	pop	{r7}
 8001e4a:	4770      	bx	lr
 8001e4c:	20000068 	.word	0x20000068

08001e50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e54:	f7ff fff2 	bl	8001e3c <HAL_RCC_GetHCLKFreq>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	4b05      	ldr	r3, [pc, #20]	; (8001e70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	0a1b      	lsrs	r3, r3, #8
 8001e60:	f003 0307 	and.w	r3, r3, #7
 8001e64:	4903      	ldr	r1, [pc, #12]	; (8001e74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e66:	5ccb      	ldrb	r3, [r1, r3]
 8001e68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	40021000 	.word	0x40021000
 8001e74:	08002f2c 	.word	0x08002f2c

08001e78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e7c:	f7ff ffde 	bl	8001e3c <HAL_RCC_GetHCLKFreq>
 8001e80:	4602      	mov	r2, r0
 8001e82:	4b05      	ldr	r3, [pc, #20]	; (8001e98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	0adb      	lsrs	r3, r3, #11
 8001e88:	f003 0307 	and.w	r3, r3, #7
 8001e8c:	4903      	ldr	r1, [pc, #12]	; (8001e9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e8e:	5ccb      	ldrb	r3, [r1, r3]
 8001e90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	40021000 	.word	0x40021000
 8001e9c:	08002f2c 	.word	0x08002f2c

08001ea0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b085      	sub	sp, #20
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ea8:	4b0a      	ldr	r3, [pc, #40]	; (8001ed4 <RCC_Delay+0x34>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a0a      	ldr	r2, [pc, #40]	; (8001ed8 <RCC_Delay+0x38>)
 8001eae:	fba2 2303 	umull	r2, r3, r2, r3
 8001eb2:	0a5b      	lsrs	r3, r3, #9
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	fb02 f303 	mul.w	r3, r2, r3
 8001eba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001ebc:	bf00      	nop
  }
  while (Delay --);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	1e5a      	subs	r2, r3, #1
 8001ec2:	60fa      	str	r2, [r7, #12]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d1f9      	bne.n	8001ebc <RCC_Delay+0x1c>
}
 8001ec8:	bf00      	nop
 8001eca:	bf00      	nop
 8001ecc:	3714      	adds	r7, #20
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bc80      	pop	{r7}
 8001ed2:	4770      	bx	lr
 8001ed4:	20000068 	.word	0x20000068
 8001ed8:	10624dd3 	.word	0x10624dd3

08001edc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d101      	bne.n	8001eee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e041      	b.n	8001f72 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d106      	bne.n	8001f08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2200      	movs	r2, #0
 8001efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f7fe fdd6 	bl	8000ab4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2202      	movs	r2, #2
 8001f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	3304      	adds	r3, #4
 8001f18:	4619      	mov	r1, r3
 8001f1a:	4610      	mov	r0, r2
 8001f1c:	f000 fa6a 	bl	80023f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2201      	movs	r2, #1
 8001f24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2201      	movs	r2, #1
 8001f34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2201      	movs	r2, #1
 8001f44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2201      	movs	r2, #1
 8001f54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2201      	movs	r2, #1
 8001f64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f70:	2300      	movs	r3, #0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3708      	adds	r7, #8
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
	...

08001f7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b085      	sub	sp, #20
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d001      	beq.n	8001f94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e035      	b.n	8002000 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2202      	movs	r2, #2
 8001f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	68da      	ldr	r2, [r3, #12]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f042 0201 	orr.w	r2, r2, #1
 8001faa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a16      	ldr	r2, [pc, #88]	; (800200c <HAL_TIM_Base_Start_IT+0x90>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d009      	beq.n	8001fca <HAL_TIM_Base_Start_IT+0x4e>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fbe:	d004      	beq.n	8001fca <HAL_TIM_Base_Start_IT+0x4e>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a12      	ldr	r2, [pc, #72]	; (8002010 <HAL_TIM_Base_Start_IT+0x94>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d111      	bne.n	8001fee <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	f003 0307 	and.w	r3, r3, #7
 8001fd4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2b06      	cmp	r3, #6
 8001fda:	d010      	beq.n	8001ffe <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f042 0201 	orr.w	r2, r2, #1
 8001fea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fec:	e007      	b.n	8001ffe <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f042 0201 	orr.w	r2, r2, #1
 8001ffc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ffe:	2300      	movs	r3, #0
}
 8002000:	4618      	mov	r0, r3
 8002002:	3714      	adds	r7, #20
 8002004:	46bd      	mov	sp, r7
 8002006:	bc80      	pop	{r7}
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	40012c00 	.word	0x40012c00
 8002010:	40000400 	.word	0x40000400

08002014 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	691b      	ldr	r3, [r3, #16]
 8002022:	f003 0302 	and.w	r3, r3, #2
 8002026:	2b02      	cmp	r3, #2
 8002028:	d122      	bne.n	8002070 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	f003 0302 	and.w	r3, r3, #2
 8002034:	2b02      	cmp	r3, #2
 8002036:	d11b      	bne.n	8002070 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f06f 0202 	mvn.w	r2, #2
 8002040:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2201      	movs	r2, #1
 8002046:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	699b      	ldr	r3, [r3, #24]
 800204e:	f003 0303 	and.w	r3, r3, #3
 8002052:	2b00      	cmp	r3, #0
 8002054:	d003      	beq.n	800205e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f000 f9b1 	bl	80023be <HAL_TIM_IC_CaptureCallback>
 800205c:	e005      	b.n	800206a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f000 f9a4 	bl	80023ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f000 f9b3 	bl	80023d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2200      	movs	r2, #0
 800206e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	691b      	ldr	r3, [r3, #16]
 8002076:	f003 0304 	and.w	r3, r3, #4
 800207a:	2b04      	cmp	r3, #4
 800207c:	d122      	bne.n	80020c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	f003 0304 	and.w	r3, r3, #4
 8002088:	2b04      	cmp	r3, #4
 800208a:	d11b      	bne.n	80020c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f06f 0204 	mvn.w	r2, #4
 8002094:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2202      	movs	r2, #2
 800209a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	699b      	ldr	r3, [r3, #24]
 80020a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d003      	beq.n	80020b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f000 f987 	bl	80023be <HAL_TIM_IC_CaptureCallback>
 80020b0:	e005      	b.n	80020be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f000 f97a 	bl	80023ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f000 f989 	bl	80023d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	691b      	ldr	r3, [r3, #16]
 80020ca:	f003 0308 	and.w	r3, r3, #8
 80020ce:	2b08      	cmp	r3, #8
 80020d0:	d122      	bne.n	8002118 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	f003 0308 	and.w	r3, r3, #8
 80020dc:	2b08      	cmp	r3, #8
 80020de:	d11b      	bne.n	8002118 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f06f 0208 	mvn.w	r2, #8
 80020e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2204      	movs	r2, #4
 80020ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	69db      	ldr	r3, [r3, #28]
 80020f6:	f003 0303 	and.w	r3, r3, #3
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d003      	beq.n	8002106 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f000 f95d 	bl	80023be <HAL_TIM_IC_CaptureCallback>
 8002104:	e005      	b.n	8002112 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f000 f950 	bl	80023ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f000 f95f 	bl	80023d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	691b      	ldr	r3, [r3, #16]
 800211e:	f003 0310 	and.w	r3, r3, #16
 8002122:	2b10      	cmp	r3, #16
 8002124:	d122      	bne.n	800216c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	f003 0310 	and.w	r3, r3, #16
 8002130:	2b10      	cmp	r3, #16
 8002132:	d11b      	bne.n	800216c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f06f 0210 	mvn.w	r2, #16
 800213c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2208      	movs	r2, #8
 8002142:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	69db      	ldr	r3, [r3, #28]
 800214a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800214e:	2b00      	cmp	r3, #0
 8002150:	d003      	beq.n	800215a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f000 f933 	bl	80023be <HAL_TIM_IC_CaptureCallback>
 8002158:	e005      	b.n	8002166 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f000 f926 	bl	80023ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f000 f935 	bl	80023d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	691b      	ldr	r3, [r3, #16]
 8002172:	f003 0301 	and.w	r3, r3, #1
 8002176:	2b01      	cmp	r3, #1
 8002178:	d10e      	bne.n	8002198 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	f003 0301 	and.w	r3, r3, #1
 8002184:	2b01      	cmp	r3, #1
 8002186:	d107      	bne.n	8002198 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f06f 0201 	mvn.w	r2, #1
 8002190:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f7fe fc4a 	bl	8000a2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	691b      	ldr	r3, [r3, #16]
 800219e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021a2:	2b80      	cmp	r3, #128	; 0x80
 80021a4:	d10e      	bne.n	80021c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021b0:	2b80      	cmp	r3, #128	; 0x80
 80021b2:	d107      	bne.n	80021c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80021bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f000 fa67 	bl	8002692 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	691b      	ldr	r3, [r3, #16]
 80021ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021ce:	2b40      	cmp	r3, #64	; 0x40
 80021d0:	d10e      	bne.n	80021f0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021dc:	2b40      	cmp	r3, #64	; 0x40
 80021de:	d107      	bne.n	80021f0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80021e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f000 f8f9 	bl	80023e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	691b      	ldr	r3, [r3, #16]
 80021f6:	f003 0320 	and.w	r3, r3, #32
 80021fa:	2b20      	cmp	r3, #32
 80021fc:	d10e      	bne.n	800221c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	f003 0320 	and.w	r3, r3, #32
 8002208:	2b20      	cmp	r3, #32
 800220a:	d107      	bne.n	800221c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f06f 0220 	mvn.w	r2, #32
 8002214:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f000 fa32 	bl	8002680 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800221c:	bf00      	nop
 800221e:	3708      	adds	r7, #8
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002234:	2b01      	cmp	r3, #1
 8002236:	d101      	bne.n	800223c <HAL_TIM_ConfigClockSource+0x18>
 8002238:	2302      	movs	r3, #2
 800223a:	e0b3      	b.n	80023a4 <HAL_TIM_ConfigClockSource+0x180>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2201      	movs	r2, #1
 8002240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2202      	movs	r2, #2
 8002248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800225a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002262:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	68fa      	ldr	r2, [r7, #12]
 800226a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002274:	d03e      	beq.n	80022f4 <HAL_TIM_ConfigClockSource+0xd0>
 8002276:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800227a:	f200 8087 	bhi.w	800238c <HAL_TIM_ConfigClockSource+0x168>
 800227e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002282:	f000 8085 	beq.w	8002390 <HAL_TIM_ConfigClockSource+0x16c>
 8002286:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800228a:	d87f      	bhi.n	800238c <HAL_TIM_ConfigClockSource+0x168>
 800228c:	2b70      	cmp	r3, #112	; 0x70
 800228e:	d01a      	beq.n	80022c6 <HAL_TIM_ConfigClockSource+0xa2>
 8002290:	2b70      	cmp	r3, #112	; 0x70
 8002292:	d87b      	bhi.n	800238c <HAL_TIM_ConfigClockSource+0x168>
 8002294:	2b60      	cmp	r3, #96	; 0x60
 8002296:	d050      	beq.n	800233a <HAL_TIM_ConfigClockSource+0x116>
 8002298:	2b60      	cmp	r3, #96	; 0x60
 800229a:	d877      	bhi.n	800238c <HAL_TIM_ConfigClockSource+0x168>
 800229c:	2b50      	cmp	r3, #80	; 0x50
 800229e:	d03c      	beq.n	800231a <HAL_TIM_ConfigClockSource+0xf6>
 80022a0:	2b50      	cmp	r3, #80	; 0x50
 80022a2:	d873      	bhi.n	800238c <HAL_TIM_ConfigClockSource+0x168>
 80022a4:	2b40      	cmp	r3, #64	; 0x40
 80022a6:	d058      	beq.n	800235a <HAL_TIM_ConfigClockSource+0x136>
 80022a8:	2b40      	cmp	r3, #64	; 0x40
 80022aa:	d86f      	bhi.n	800238c <HAL_TIM_ConfigClockSource+0x168>
 80022ac:	2b30      	cmp	r3, #48	; 0x30
 80022ae:	d064      	beq.n	800237a <HAL_TIM_ConfigClockSource+0x156>
 80022b0:	2b30      	cmp	r3, #48	; 0x30
 80022b2:	d86b      	bhi.n	800238c <HAL_TIM_ConfigClockSource+0x168>
 80022b4:	2b20      	cmp	r3, #32
 80022b6:	d060      	beq.n	800237a <HAL_TIM_ConfigClockSource+0x156>
 80022b8:	2b20      	cmp	r3, #32
 80022ba:	d867      	bhi.n	800238c <HAL_TIM_ConfigClockSource+0x168>
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d05c      	beq.n	800237a <HAL_TIM_ConfigClockSource+0x156>
 80022c0:	2b10      	cmp	r3, #16
 80022c2:	d05a      	beq.n	800237a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80022c4:	e062      	b.n	800238c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6818      	ldr	r0, [r3, #0]
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	6899      	ldr	r1, [r3, #8]
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	685a      	ldr	r2, [r3, #4]
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	f000 f95c 	bl	8002592 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80022e8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	68fa      	ldr	r2, [r7, #12]
 80022f0:	609a      	str	r2, [r3, #8]
      break;
 80022f2:	e04e      	b.n	8002392 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6818      	ldr	r0, [r3, #0]
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	6899      	ldr	r1, [r3, #8]
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	685a      	ldr	r2, [r3, #4]
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	f000 f945 	bl	8002592 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	689a      	ldr	r2, [r3, #8]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002316:	609a      	str	r2, [r3, #8]
      break;
 8002318:	e03b      	b.n	8002392 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6818      	ldr	r0, [r3, #0]
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	6859      	ldr	r1, [r3, #4]
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	461a      	mov	r2, r3
 8002328:	f000 f8bc 	bl	80024a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2150      	movs	r1, #80	; 0x50
 8002332:	4618      	mov	r0, r3
 8002334:	f000 f913 	bl	800255e <TIM_ITRx_SetConfig>
      break;
 8002338:	e02b      	b.n	8002392 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6818      	ldr	r0, [r3, #0]
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	6859      	ldr	r1, [r3, #4]
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	68db      	ldr	r3, [r3, #12]
 8002346:	461a      	mov	r2, r3
 8002348:	f000 f8da 	bl	8002500 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2160      	movs	r1, #96	; 0x60
 8002352:	4618      	mov	r0, r3
 8002354:	f000 f903 	bl	800255e <TIM_ITRx_SetConfig>
      break;
 8002358:	e01b      	b.n	8002392 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6818      	ldr	r0, [r3, #0]
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	6859      	ldr	r1, [r3, #4]
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	461a      	mov	r2, r3
 8002368:	f000 f89c 	bl	80024a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2140      	movs	r1, #64	; 0x40
 8002372:	4618      	mov	r0, r3
 8002374:	f000 f8f3 	bl	800255e <TIM_ITRx_SetConfig>
      break;
 8002378:	e00b      	b.n	8002392 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4619      	mov	r1, r3
 8002384:	4610      	mov	r0, r2
 8002386:	f000 f8ea 	bl	800255e <TIM_ITRx_SetConfig>
        break;
 800238a:	e002      	b.n	8002392 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800238c:	bf00      	nop
 800238e:	e000      	b.n	8002392 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002390:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2201      	movs	r2, #1
 8002396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80023a2:	2300      	movs	r3, #0
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3710      	adds	r7, #16
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}

080023ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80023b4:	bf00      	nop
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bc80      	pop	{r7}
 80023bc:	4770      	bx	lr

080023be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80023be:	b480      	push	{r7}
 80023c0:	b083      	sub	sp, #12
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80023c6:	bf00      	nop
 80023c8:	370c      	adds	r7, #12
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bc80      	pop	{r7}
 80023ce:	4770      	bx	lr

080023d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80023d8:	bf00      	nop
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	bc80      	pop	{r7}
 80023e0:	4770      	bx	lr

080023e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80023e2:	b480      	push	{r7}
 80023e4:	b083      	sub	sp, #12
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80023ea:	bf00      	nop
 80023ec:	370c      	adds	r7, #12
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bc80      	pop	{r7}
 80023f2:	4770      	bx	lr

080023f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b085      	sub	sp, #20
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	4a25      	ldr	r2, [pc, #148]	; (800249c <TIM_Base_SetConfig+0xa8>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d007      	beq.n	800241c <TIM_Base_SetConfig+0x28>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002412:	d003      	beq.n	800241c <TIM_Base_SetConfig+0x28>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	4a22      	ldr	r2, [pc, #136]	; (80024a0 <TIM_Base_SetConfig+0xac>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d108      	bne.n	800242e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002422:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	68fa      	ldr	r2, [r7, #12]
 800242a:	4313      	orrs	r3, r2
 800242c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a1a      	ldr	r2, [pc, #104]	; (800249c <TIM_Base_SetConfig+0xa8>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d007      	beq.n	8002446 <TIM_Base_SetConfig+0x52>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800243c:	d003      	beq.n	8002446 <TIM_Base_SetConfig+0x52>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4a17      	ldr	r2, [pc, #92]	; (80024a0 <TIM_Base_SetConfig+0xac>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d108      	bne.n	8002458 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800244c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	68fa      	ldr	r2, [r7, #12]
 8002454:	4313      	orrs	r3, r2
 8002456:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	695b      	ldr	r3, [r3, #20]
 8002462:	4313      	orrs	r3, r2
 8002464:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	68fa      	ldr	r2, [r7, #12]
 800246a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	689a      	ldr	r2, [r3, #8]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	4a07      	ldr	r2, [pc, #28]	; (800249c <TIM_Base_SetConfig+0xa8>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d103      	bne.n	800248c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	691a      	ldr	r2, [r3, #16]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2201      	movs	r2, #1
 8002490:	615a      	str	r2, [r3, #20]
}
 8002492:	bf00      	nop
 8002494:	3714      	adds	r7, #20
 8002496:	46bd      	mov	sp, r7
 8002498:	bc80      	pop	{r7}
 800249a:	4770      	bx	lr
 800249c:	40012c00 	.word	0x40012c00
 80024a0:	40000400 	.word	0x40000400

080024a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b087      	sub	sp, #28
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	6a1b      	ldr	r3, [r3, #32]
 80024b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	6a1b      	ldr	r3, [r3, #32]
 80024ba:	f023 0201 	bic.w	r2, r3, #1
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	699b      	ldr	r3, [r3, #24]
 80024c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80024ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	011b      	lsls	r3, r3, #4
 80024d4:	693a      	ldr	r2, [r7, #16]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	f023 030a 	bic.w	r3, r3, #10
 80024e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80024e2:	697a      	ldr	r2, [r7, #20]
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	693a      	ldr	r2, [r7, #16]
 80024ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	697a      	ldr	r2, [r7, #20]
 80024f4:	621a      	str	r2, [r3, #32]
}
 80024f6:	bf00      	nop
 80024f8:	371c      	adds	r7, #28
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bc80      	pop	{r7}
 80024fe:	4770      	bx	lr

08002500 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002500:	b480      	push	{r7}
 8002502:	b087      	sub	sp, #28
 8002504:	af00      	add	r7, sp, #0
 8002506:	60f8      	str	r0, [r7, #12]
 8002508:	60b9      	str	r1, [r7, #8]
 800250a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	6a1b      	ldr	r3, [r3, #32]
 8002510:	f023 0210 	bic.w	r2, r3, #16
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	699b      	ldr	r3, [r3, #24]
 800251c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	6a1b      	ldr	r3, [r3, #32]
 8002522:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800252a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	031b      	lsls	r3, r3, #12
 8002530:	697a      	ldr	r2, [r7, #20]
 8002532:	4313      	orrs	r3, r2
 8002534:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800253c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	011b      	lsls	r3, r3, #4
 8002542:	693a      	ldr	r2, [r7, #16]
 8002544:	4313      	orrs	r3, r2
 8002546:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	697a      	ldr	r2, [r7, #20]
 800254c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	693a      	ldr	r2, [r7, #16]
 8002552:	621a      	str	r2, [r3, #32]
}
 8002554:	bf00      	nop
 8002556:	371c      	adds	r7, #28
 8002558:	46bd      	mov	sp, r7
 800255a:	bc80      	pop	{r7}
 800255c:	4770      	bx	lr

0800255e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800255e:	b480      	push	{r7}
 8002560:	b085      	sub	sp, #20
 8002562:	af00      	add	r7, sp, #0
 8002564:	6078      	str	r0, [r7, #4]
 8002566:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002574:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002576:	683a      	ldr	r2, [r7, #0]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	4313      	orrs	r3, r2
 800257c:	f043 0307 	orr.w	r3, r3, #7
 8002580:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	68fa      	ldr	r2, [r7, #12]
 8002586:	609a      	str	r2, [r3, #8]
}
 8002588:	bf00      	nop
 800258a:	3714      	adds	r7, #20
 800258c:	46bd      	mov	sp, r7
 800258e:	bc80      	pop	{r7}
 8002590:	4770      	bx	lr

08002592 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002592:	b480      	push	{r7}
 8002594:	b087      	sub	sp, #28
 8002596:	af00      	add	r7, sp, #0
 8002598:	60f8      	str	r0, [r7, #12]
 800259a:	60b9      	str	r1, [r7, #8]
 800259c:	607a      	str	r2, [r7, #4]
 800259e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80025ac:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	021a      	lsls	r2, r3, #8
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	431a      	orrs	r2, r3
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	697a      	ldr	r2, [r7, #20]
 80025bc:	4313      	orrs	r3, r2
 80025be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	697a      	ldr	r2, [r7, #20]
 80025c4:	609a      	str	r2, [r3, #8]
}
 80025c6:	bf00      	nop
 80025c8:	371c      	adds	r7, #28
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bc80      	pop	{r7}
 80025ce:	4770      	bx	lr

080025d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b085      	sub	sp, #20
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d101      	bne.n	80025e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80025e4:	2302      	movs	r3, #2
 80025e6:	e041      	b.n	800266c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2202      	movs	r2, #2
 80025f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800260e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	68fa      	ldr	r2, [r7, #12]
 8002616:	4313      	orrs	r3, r2
 8002618:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	68fa      	ldr	r2, [r7, #12]
 8002620:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a14      	ldr	r2, [pc, #80]	; (8002678 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d009      	beq.n	8002640 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002634:	d004      	beq.n	8002640 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a10      	ldr	r2, [pc, #64]	; (800267c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d10c      	bne.n	800265a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002646:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	68ba      	ldr	r2, [r7, #8]
 800264e:	4313      	orrs	r3, r2
 8002650:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	68ba      	ldr	r2, [r7, #8]
 8002658:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2201      	movs	r2, #1
 800265e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800266a:	2300      	movs	r3, #0
}
 800266c:	4618      	mov	r0, r3
 800266e:	3714      	adds	r7, #20
 8002670:	46bd      	mov	sp, r7
 8002672:	bc80      	pop	{r7}
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	40012c00 	.word	0x40012c00
 800267c:	40000400 	.word	0x40000400

08002680 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002688:	bf00      	nop
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	bc80      	pop	{r7}
 8002690:	4770      	bx	lr

08002692 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002692:	b480      	push	{r7}
 8002694:	b083      	sub	sp, #12
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800269a:	bf00      	nop
 800269c:	370c      	adds	r7, #12
 800269e:	46bd      	mov	sp, r7
 80026a0:	bc80      	pop	{r7}
 80026a2:	4770      	bx	lr

080026a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d101      	bne.n	80026b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e03f      	b.n	8002736 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d106      	bne.n	80026d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f7fe fa16 	bl	8000afc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2224      	movs	r2, #36	; 0x24
 80026d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	68da      	ldr	r2, [r3, #12]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	f000 fb49 	bl	8002d80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	691a      	ldr	r2, [r3, #16]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80026fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	695a      	ldr	r2, [r3, #20]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800270c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	68da      	ldr	r2, [r3, #12]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800271c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2220      	movs	r2, #32
 8002728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2220      	movs	r2, #32
 8002730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002734:	2300      	movs	r3, #0
}
 8002736:	4618      	mov	r0, r3
 8002738:	3708      	adds	r7, #8
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
	...

08002740 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b08a      	sub	sp, #40	; 0x28
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	695b      	ldr	r3, [r3, #20]
 800275e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002760:	2300      	movs	r3, #0
 8002762:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002764:	2300      	movs	r3, #0
 8002766:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276a:	f003 030f 	and.w	r3, r3, #15
 800276e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002770:	69bb      	ldr	r3, [r7, #24]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d10d      	bne.n	8002792 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002778:	f003 0320 	and.w	r3, r3, #32
 800277c:	2b00      	cmp	r3, #0
 800277e:	d008      	beq.n	8002792 <HAL_UART_IRQHandler+0x52>
 8002780:	6a3b      	ldr	r3, [r7, #32]
 8002782:	f003 0320 	and.w	r3, r3, #32
 8002786:	2b00      	cmp	r3, #0
 8002788:	d003      	beq.n	8002792 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f000 fa4f 	bl	8002c2e <UART_Receive_IT>
      return;
 8002790:	e17b      	b.n	8002a8a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	2b00      	cmp	r3, #0
 8002796:	f000 80b1 	beq.w	80028fc <HAL_UART_IRQHandler+0x1bc>
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	f003 0301 	and.w	r3, r3, #1
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d105      	bne.n	80027b0 <HAL_UART_IRQHandler+0x70>
 80027a4:	6a3b      	ldr	r3, [r7, #32]
 80027a6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	f000 80a6 	beq.w	80028fc <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80027b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b2:	f003 0301 	and.w	r3, r3, #1
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d00a      	beq.n	80027d0 <HAL_UART_IRQHandler+0x90>
 80027ba:	6a3b      	ldr	r3, [r7, #32]
 80027bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d005      	beq.n	80027d0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c8:	f043 0201 	orr.w	r2, r3, #1
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80027d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d2:	f003 0304 	and.w	r3, r3, #4
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d00a      	beq.n	80027f0 <HAL_UART_IRQHandler+0xb0>
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	f003 0301 	and.w	r3, r3, #1
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d005      	beq.n	80027f0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e8:	f043 0202 	orr.w	r2, r3, #2
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80027f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f2:	f003 0302 	and.w	r3, r3, #2
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d00a      	beq.n	8002810 <HAL_UART_IRQHandler+0xd0>
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	f003 0301 	and.w	r3, r3, #1
 8002800:	2b00      	cmp	r3, #0
 8002802:	d005      	beq.n	8002810 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002808:	f043 0204 	orr.w	r2, r3, #4
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002812:	f003 0308 	and.w	r3, r3, #8
 8002816:	2b00      	cmp	r3, #0
 8002818:	d00f      	beq.n	800283a <HAL_UART_IRQHandler+0xfa>
 800281a:	6a3b      	ldr	r3, [r7, #32]
 800281c:	f003 0320 	and.w	r3, r3, #32
 8002820:	2b00      	cmp	r3, #0
 8002822:	d104      	bne.n	800282e <HAL_UART_IRQHandler+0xee>
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	f003 0301 	and.w	r3, r3, #1
 800282a:	2b00      	cmp	r3, #0
 800282c:	d005      	beq.n	800283a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002832:	f043 0208 	orr.w	r2, r3, #8
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283e:	2b00      	cmp	r3, #0
 8002840:	f000 811e 	beq.w	8002a80 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002846:	f003 0320 	and.w	r3, r3, #32
 800284a:	2b00      	cmp	r3, #0
 800284c:	d007      	beq.n	800285e <HAL_UART_IRQHandler+0x11e>
 800284e:	6a3b      	ldr	r3, [r7, #32]
 8002850:	f003 0320 	and.w	r3, r3, #32
 8002854:	2b00      	cmp	r3, #0
 8002856:	d002      	beq.n	800285e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f000 f9e8 	bl	8002c2e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	695b      	ldr	r3, [r3, #20]
 8002864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002868:	2b00      	cmp	r3, #0
 800286a:	bf14      	ite	ne
 800286c:	2301      	movne	r3, #1
 800286e:	2300      	moveq	r3, #0
 8002870:	b2db      	uxtb	r3, r3
 8002872:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002878:	f003 0308 	and.w	r3, r3, #8
 800287c:	2b00      	cmp	r3, #0
 800287e:	d102      	bne.n	8002886 <HAL_UART_IRQHandler+0x146>
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d031      	beq.n	80028ea <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f000 f92a 	bl	8002ae0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	695b      	ldr	r3, [r3, #20]
 8002892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002896:	2b00      	cmp	r3, #0
 8002898:	d023      	beq.n	80028e2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	695a      	ldr	r2, [r3, #20]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028a8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d013      	beq.n	80028da <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028b6:	4a76      	ldr	r2, [pc, #472]	; (8002a90 <HAL_UART_IRQHandler+0x350>)
 80028b8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028be:	4618      	mov	r0, r3
 80028c0:	f7fe fcd2 	bl	8001268 <HAL_DMA_Abort_IT>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d016      	beq.n	80028f8 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80028d4:	4610      	mov	r0, r2
 80028d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028d8:	e00e      	b.n	80028f8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f000 f8ec 	bl	8002ab8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028e0:	e00a      	b.n	80028f8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f000 f8e8 	bl	8002ab8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028e8:	e006      	b.n	80028f8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f000 f8e4 	bl	8002ab8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2200      	movs	r2, #0
 80028f4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80028f6:	e0c3      	b.n	8002a80 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028f8:	bf00      	nop
    return;
 80028fa:	e0c1      	b.n	8002a80 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002900:	2b01      	cmp	r3, #1
 8002902:	f040 80a1 	bne.w	8002a48 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002908:	f003 0310 	and.w	r3, r3, #16
 800290c:	2b00      	cmp	r3, #0
 800290e:	f000 809b 	beq.w	8002a48 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002912:	6a3b      	ldr	r3, [r7, #32]
 8002914:	f003 0310 	and.w	r3, r3, #16
 8002918:	2b00      	cmp	r3, #0
 800291a:	f000 8095 	beq.w	8002a48 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800291e:	2300      	movs	r3, #0
 8002920:	60fb      	str	r3, [r7, #12]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	60fb      	str	r3, [r7, #12]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	60fb      	str	r3, [r7, #12]
 8002932:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	695b      	ldr	r3, [r3, #20]
 800293a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800293e:	2b00      	cmp	r3, #0
 8002940:	d04e      	beq.n	80029e0 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800294c:	8a3b      	ldrh	r3, [r7, #16]
 800294e:	2b00      	cmp	r3, #0
 8002950:	f000 8098 	beq.w	8002a84 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002958:	8a3a      	ldrh	r2, [r7, #16]
 800295a:	429a      	cmp	r2, r3
 800295c:	f080 8092 	bcs.w	8002a84 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	8a3a      	ldrh	r2, [r7, #16]
 8002964:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800296a:	699b      	ldr	r3, [r3, #24]
 800296c:	2b20      	cmp	r3, #32
 800296e:	d02b      	beq.n	80029c8 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	68da      	ldr	r2, [r3, #12]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800297e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	695a      	ldr	r2, [r3, #20]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f022 0201 	bic.w	r2, r2, #1
 800298e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	695a      	ldr	r2, [r3, #20]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800299e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2220      	movs	r2, #32
 80029a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	68da      	ldr	r2, [r3, #12]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f022 0210 	bic.w	r2, r2, #16
 80029bc:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029c2:	4618      	mov	r0, r3
 80029c4:	f7fe fc15 	bl	80011f2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	4619      	mov	r1, r3
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f000 f876 	bl	8002aca <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80029de:	e051      	b.n	8002a84 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d047      	beq.n	8002a88 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80029f8:	8a7b      	ldrh	r3, [r7, #18]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d044      	beq.n	8002a88 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	68da      	ldr	r2, [r3, #12]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002a0c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	695a      	ldr	r2, [r3, #20]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f022 0201 	bic.w	r2, r2, #1
 8002a1c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2220      	movs	r2, #32
 8002a22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	68da      	ldr	r2, [r3, #12]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f022 0210 	bic.w	r2, r2, #16
 8002a3a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002a3c:	8a7b      	ldrh	r3, [r7, #18]
 8002a3e:	4619      	mov	r1, r3
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f000 f842 	bl	8002aca <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002a46:	e01f      	b.n	8002a88 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d008      	beq.n	8002a64 <HAL_UART_IRQHandler+0x324>
 8002a52:	6a3b      	ldr	r3, [r7, #32]
 8002a54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d003      	beq.n	8002a64 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f000 f87f 	bl	8002b60 <UART_Transmit_IT>
    return;
 8002a62:	e012      	b.n	8002a8a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d00d      	beq.n	8002a8a <HAL_UART_IRQHandler+0x34a>
 8002a6e:	6a3b      	ldr	r3, [r7, #32]
 8002a70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d008      	beq.n	8002a8a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f000 f8c0 	bl	8002bfe <UART_EndTransmit_IT>
    return;
 8002a7e:	e004      	b.n	8002a8a <HAL_UART_IRQHandler+0x34a>
    return;
 8002a80:	bf00      	nop
 8002a82:	e002      	b.n	8002a8a <HAL_UART_IRQHandler+0x34a>
      return;
 8002a84:	bf00      	nop
 8002a86:	e000      	b.n	8002a8a <HAL_UART_IRQHandler+0x34a>
      return;
 8002a88:	bf00      	nop
  }
}
 8002a8a:	3728      	adds	r7, #40	; 0x28
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	08002b39 	.word	0x08002b39

08002a94 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002a9c:	bf00      	nop
 8002a9e:	370c      	adds	r7, #12
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bc80      	pop	{r7}
 8002aa4:	4770      	bx	lr

08002aa6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	b083      	sub	sp, #12
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002aae:	bf00      	nop
 8002ab0:	370c      	adds	r7, #12
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bc80      	pop	{r7}
 8002ab6:	4770      	bx	lr

08002ab8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002ac0:	bf00      	nop
 8002ac2:	370c      	adds	r7, #12
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bc80      	pop	{r7}
 8002ac8:	4770      	bx	lr

08002aca <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002aca:	b480      	push	{r7}
 8002acc:	b083      	sub	sp, #12
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
 8002ad2:	460b      	mov	r3, r1
 8002ad4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002ad6:	bf00      	nop
 8002ad8:	370c      	adds	r7, #12
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bc80      	pop	{r7}
 8002ade:	4770      	bx	lr

08002ae0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	68da      	ldr	r2, [r3, #12]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002af6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	695a      	ldr	r2, [r3, #20]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f022 0201 	bic.w	r2, r2, #1
 8002b06:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d107      	bne.n	8002b20 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	68da      	ldr	r2, [r3, #12]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f022 0210 	bic.w	r2, r2, #16
 8002b1e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2220      	movs	r2, #32
 8002b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002b2e:	bf00      	nop
 8002b30:	370c      	adds	r7, #12
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bc80      	pop	{r7}
 8002b36:	4770      	bx	lr

08002b38 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b44:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002b52:	68f8      	ldr	r0, [r7, #12]
 8002b54:	f7ff ffb0 	bl	8002ab8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002b58:	bf00      	nop
 8002b5a:	3710      	adds	r7, #16
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b085      	sub	sp, #20
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	2b21      	cmp	r3, #33	; 0x21
 8002b72:	d13e      	bne.n	8002bf2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b7c:	d114      	bne.n	8002ba8 <UART_Transmit_IT+0x48>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	691b      	ldr	r3, [r3, #16]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d110      	bne.n	8002ba8 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a1b      	ldr	r3, [r3, #32]
 8002b8a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	881b      	ldrh	r3, [r3, #0]
 8002b90:	461a      	mov	r2, r3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b9a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6a1b      	ldr	r3, [r3, #32]
 8002ba0:	1c9a      	adds	r2, r3, #2
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	621a      	str	r2, [r3, #32]
 8002ba6:	e008      	b.n	8002bba <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a1b      	ldr	r3, [r3, #32]
 8002bac:	1c59      	adds	r1, r3, #1
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	6211      	str	r1, [r2, #32]
 8002bb2:	781a      	ldrb	r2, [r3, #0]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	3b01      	subs	r3, #1
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d10f      	bne.n	8002bee <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	68da      	ldr	r2, [r3, #12]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bdc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	68da      	ldr	r2, [r3, #12]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bec:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	e000      	b.n	8002bf4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002bf2:	2302      	movs	r3, #2
  }
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3714      	adds	r7, #20
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bc80      	pop	{r7}
 8002bfc:	4770      	bx	lr

08002bfe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b082      	sub	sp, #8
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	68da      	ldr	r2, [r3, #12]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c14:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2220      	movs	r2, #32
 8002c1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f7ff ff38 	bl	8002a94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3708      	adds	r7, #8
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}

08002c2e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002c2e:	b580      	push	{r7, lr}
 8002c30:	b086      	sub	sp, #24
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	2b22      	cmp	r3, #34	; 0x22
 8002c40:	f040 8099 	bne.w	8002d76 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c4c:	d117      	bne.n	8002c7e <UART_Receive_IT+0x50>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	691b      	ldr	r3, [r3, #16]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d113      	bne.n	8002c7e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002c56:	2300      	movs	r3, #0
 8002c58:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c5e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c6c:	b29a      	uxth	r2, r3
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c76:	1c9a      	adds	r2, r3, #2
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	629a      	str	r2, [r3, #40]	; 0x28
 8002c7c:	e026      	b.n	8002ccc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c82:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8002c84:	2300      	movs	r3, #0
 8002c86:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c90:	d007      	beq.n	8002ca2 <UART_Receive_IT+0x74>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d10a      	bne.n	8002cb0 <UART_Receive_IT+0x82>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	691b      	ldr	r3, [r3, #16]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d106      	bne.n	8002cb0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	b2da      	uxtb	r2, r3
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	701a      	strb	r2, [r3, #0]
 8002cae:	e008      	b.n	8002cc2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002cbc:	b2da      	uxtb	r2, r3
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc6:	1c5a      	adds	r2, r3, #1
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	3b01      	subs	r3, #1
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	4619      	mov	r1, r3
 8002cda:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d148      	bne.n	8002d72 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	68da      	ldr	r2, [r3, #12]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f022 0220 	bic.w	r2, r2, #32
 8002cee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	68da      	ldr	r2, [r3, #12]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002cfe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	695a      	ldr	r2, [r3, #20]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f022 0201 	bic.w	r2, r2, #1
 8002d0e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2220      	movs	r2, #32
 8002d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d123      	bne.n	8002d68 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	68da      	ldr	r2, [r3, #12]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f022 0210 	bic.w	r2, r2, #16
 8002d34:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0310 	and.w	r3, r3, #16
 8002d40:	2b10      	cmp	r3, #16
 8002d42:	d10a      	bne.n	8002d5a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002d44:	2300      	movs	r3, #0
 8002d46:	60fb      	str	r3, [r7, #12]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	60fb      	str	r3, [r7, #12]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	60fb      	str	r3, [r7, #12]
 8002d58:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002d5e:	4619      	mov	r1, r3
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f7ff feb2 	bl	8002aca <HAL_UARTEx_RxEventCallback>
 8002d66:	e002      	b.n	8002d6e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f7ff fe9c 	bl	8002aa6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	e002      	b.n	8002d78 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8002d72:	2300      	movs	r3, #0
 8002d74:	e000      	b.n	8002d78 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002d76:	2302      	movs	r3, #2
  }
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3718      	adds	r7, #24
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b084      	sub	sp, #16
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	68da      	ldr	r2, [r3, #12]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	430a      	orrs	r2, r1
 8002d9c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	689a      	ldr	r2, [r3, #8]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	431a      	orrs	r2, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	695b      	ldr	r3, [r3, #20]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002dba:	f023 030c 	bic.w	r3, r3, #12
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	6812      	ldr	r2, [r2, #0]
 8002dc2:	68b9      	ldr	r1, [r7, #8]
 8002dc4:	430b      	orrs	r3, r1
 8002dc6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	695b      	ldr	r3, [r3, #20]
 8002dce:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	699a      	ldr	r2, [r3, #24]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	430a      	orrs	r2, r1
 8002ddc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a2c      	ldr	r2, [pc, #176]	; (8002e94 <UART_SetConfig+0x114>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d103      	bne.n	8002df0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002de8:	f7ff f846 	bl	8001e78 <HAL_RCC_GetPCLK2Freq>
 8002dec:	60f8      	str	r0, [r7, #12]
 8002dee:	e002      	b.n	8002df6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002df0:	f7ff f82e 	bl	8001e50 <HAL_RCC_GetPCLK1Freq>
 8002df4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002df6:	68fa      	ldr	r2, [r7, #12]
 8002df8:	4613      	mov	r3, r2
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	4413      	add	r3, r2
 8002dfe:	009a      	lsls	r2, r3, #2
 8002e00:	441a      	add	r2, r3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e0c:	4a22      	ldr	r2, [pc, #136]	; (8002e98 <UART_SetConfig+0x118>)
 8002e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e12:	095b      	lsrs	r3, r3, #5
 8002e14:	0119      	lsls	r1, r3, #4
 8002e16:	68fa      	ldr	r2, [r7, #12]
 8002e18:	4613      	mov	r3, r2
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	4413      	add	r3, r2
 8002e1e:	009a      	lsls	r2, r3, #2
 8002e20:	441a      	add	r2, r3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e2c:	4b1a      	ldr	r3, [pc, #104]	; (8002e98 <UART_SetConfig+0x118>)
 8002e2e:	fba3 0302 	umull	r0, r3, r3, r2
 8002e32:	095b      	lsrs	r3, r3, #5
 8002e34:	2064      	movs	r0, #100	; 0x64
 8002e36:	fb00 f303 	mul.w	r3, r0, r3
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	011b      	lsls	r3, r3, #4
 8002e3e:	3332      	adds	r3, #50	; 0x32
 8002e40:	4a15      	ldr	r2, [pc, #84]	; (8002e98 <UART_SetConfig+0x118>)
 8002e42:	fba2 2303 	umull	r2, r3, r2, r3
 8002e46:	095b      	lsrs	r3, r3, #5
 8002e48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e4c:	4419      	add	r1, r3
 8002e4e:	68fa      	ldr	r2, [r7, #12]
 8002e50:	4613      	mov	r3, r2
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	4413      	add	r3, r2
 8002e56:	009a      	lsls	r2, r3, #2
 8002e58:	441a      	add	r2, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e64:	4b0c      	ldr	r3, [pc, #48]	; (8002e98 <UART_SetConfig+0x118>)
 8002e66:	fba3 0302 	umull	r0, r3, r3, r2
 8002e6a:	095b      	lsrs	r3, r3, #5
 8002e6c:	2064      	movs	r0, #100	; 0x64
 8002e6e:	fb00 f303 	mul.w	r3, r0, r3
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	011b      	lsls	r3, r3, #4
 8002e76:	3332      	adds	r3, #50	; 0x32
 8002e78:	4a07      	ldr	r2, [pc, #28]	; (8002e98 <UART_SetConfig+0x118>)
 8002e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e7e:	095b      	lsrs	r3, r3, #5
 8002e80:	f003 020f 	and.w	r2, r3, #15
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	440a      	add	r2, r1
 8002e8a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002e8c:	bf00      	nop
 8002e8e:	3710      	adds	r7, #16
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	40013800 	.word	0x40013800
 8002e98:	51eb851f 	.word	0x51eb851f

08002e9c <__libc_init_array>:
 8002e9c:	b570      	push	{r4, r5, r6, lr}
 8002e9e:	2600      	movs	r6, #0
 8002ea0:	4d0c      	ldr	r5, [pc, #48]	; (8002ed4 <__libc_init_array+0x38>)
 8002ea2:	4c0d      	ldr	r4, [pc, #52]	; (8002ed8 <__libc_init_array+0x3c>)
 8002ea4:	1b64      	subs	r4, r4, r5
 8002ea6:	10a4      	asrs	r4, r4, #2
 8002ea8:	42a6      	cmp	r6, r4
 8002eaa:	d109      	bne.n	8002ec0 <__libc_init_array+0x24>
 8002eac:	f000 f822 	bl	8002ef4 <_init>
 8002eb0:	2600      	movs	r6, #0
 8002eb2:	4d0a      	ldr	r5, [pc, #40]	; (8002edc <__libc_init_array+0x40>)
 8002eb4:	4c0a      	ldr	r4, [pc, #40]	; (8002ee0 <__libc_init_array+0x44>)
 8002eb6:	1b64      	subs	r4, r4, r5
 8002eb8:	10a4      	asrs	r4, r4, #2
 8002eba:	42a6      	cmp	r6, r4
 8002ebc:	d105      	bne.n	8002eca <__libc_init_array+0x2e>
 8002ebe:	bd70      	pop	{r4, r5, r6, pc}
 8002ec0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ec4:	4798      	blx	r3
 8002ec6:	3601      	adds	r6, #1
 8002ec8:	e7ee      	b.n	8002ea8 <__libc_init_array+0xc>
 8002eca:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ece:	4798      	blx	r3
 8002ed0:	3601      	adds	r6, #1
 8002ed2:	e7f2      	b.n	8002eba <__libc_init_array+0x1e>
 8002ed4:	08002f34 	.word	0x08002f34
 8002ed8:	08002f34 	.word	0x08002f34
 8002edc:	08002f34 	.word	0x08002f34
 8002ee0:	08002f38 	.word	0x08002f38

08002ee4 <memset>:
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	4402      	add	r2, r0
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d100      	bne.n	8002eee <memset+0xa>
 8002eec:	4770      	bx	lr
 8002eee:	f803 1b01 	strb.w	r1, [r3], #1
 8002ef2:	e7f9      	b.n	8002ee8 <memset+0x4>

08002ef4 <_init>:
 8002ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ef6:	bf00      	nop
 8002ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002efa:	bc08      	pop	{r3}
 8002efc:	469e      	mov	lr, r3
 8002efe:	4770      	bx	lr

08002f00 <_fini>:
 8002f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f02:	bf00      	nop
 8002f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f06:	bc08      	pop	{r3}
 8002f08:	469e      	mov	lr, r3
 8002f0a:	4770      	bx	lr
